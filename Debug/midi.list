
midi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000800c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008224  08008224  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800822c  0800822c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027a4  200001f4  08008428  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002998  08008428  00022998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d87e  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036fc  00000000  00000000  0003daa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001118  00000000  00000000  000411a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb0  00000000  00000000  000422b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029a75  00000000  00000000  00043268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e92  00000000  00000000  0006ccdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000edfb8  00000000  00000000  0007eb6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  0016cb27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e0  00000000  00000000  0016cba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f4 	.word	0x200001f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800817c 	.word	0x0800817c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f8 	.word	0x200001f8
 80001c4:	0800817c 	.word	0x0800817c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fa7c 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f808 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f898 	bl	8000608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f866 	bl	80005a8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f007 f824 	bl	8007528 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x18>
	...

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b096      	sub	sp, #88	; 0x58
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2244      	movs	r2, #68	; 0x44
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f007 fe3a 	bl	800816c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	463b      	mov	r3, r7
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000506:	f44f 7000 	mov.w	r0, #512	; 0x200
 800050a:	f001 ffab 	bl	8002464 <HAL_PWREx_ControlVoltageScaling>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000514:	f000 f8de 	bl	80006d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000518:	f001 ff86 	bl	8002428 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800051c:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <SystemClock_Config+0xc0>)
 800051e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000522:	4a20      	ldr	r2, [pc, #128]	; (80005a4 <SystemClock_Config+0xc0>)
 8000524:	f023 0318 	bic.w	r3, r3, #24
 8000528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800052c:	2314      	movs	r3, #20
 800052e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000530:	2301      	movs	r3, #1
 8000532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000534:	2301      	movs	r3, #1
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800053c:	2360      	movs	r3, #96	; 0x60
 800053e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000540:	2302      	movs	r3, #2
 8000542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000544:	2301      	movs	r3, #1
 8000546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000548:	2301      	movs	r3, #1
 800054a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800054c:	2310      	movs	r3, #16
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000550:	2307      	movs	r3, #7
 8000552:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000554:	2302      	movs	r3, #2
 8000556:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000558:	2302      	movs	r3, #2
 800055a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4618      	mov	r0, r3
 8000562:	f001 ffe5 	bl	8002530 <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800056c:	f000 f8b2 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2303      	movs	r3, #3
 8000576:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	2101      	movs	r1, #1
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fbab 	bl	8002ce4 <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000594:	f000 f89e 	bl	80006d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000598:	f003 f8ac 	bl	80036f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800059c:	bf00      	nop
 800059e:	3758      	adds	r7, #88	; 0x58
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ec:	f003 fa5c 	bl	8003aa8 <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f86d 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20001df4 	.word	0x20001df4
 8000604:	40004400 	.word	0x40004400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a24      	ldr	r2, [pc, #144]	; (80006cc <MX_GPIO_Init+0xc4>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <MX_GPIO_Init+0xc4>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 fcf7 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000690:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MX_GPIO_Init+0xc8>)
 80006a2:	f000 fb41 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a6:	2320      	movs	r3, #32
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f000 fb32 	bl	8000d28 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006da:	e7fe      	b.n	80006da <Error_Handler+0x6>

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x44>)
 80006e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x44>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6613      	str	r3, [r2, #96]	; 0x60
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x44>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_MspInit+0x44>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x44>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	6593      	str	r3, [r2, #88]	; 0x58
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x44>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0ac      	sub	sp, #176	; 0xb0
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2288      	movs	r2, #136	; 0x88
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f007 fd11 	bl	800816c <memset>
  if(huart->Instance==USART2)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <HAL_UART_MspInit+0xb0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d13b      	bne.n	80007cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000758:	2300      	movs	r3, #0
 800075a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fce1 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800076c:	f7ff ffb2 	bl	80006d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <HAL_UART_MspInit+0xb4>)
 8000772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000774:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <HAL_UART_MspInit+0xb4>)
 8000776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077a:	6593      	str	r3, [r2, #88]	; 0x58
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <HAL_UART_MspInit+0xb4>)
 800077e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <HAL_UART_MspInit+0xb4>)
 800078a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <HAL_UART_MspInit+0xb4>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_UART_MspInit+0xb4>)
 8000796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a0:	230c      	movs	r3, #12
 80007a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b8:	2307      	movs	r3, #7
 80007ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f000 faae 	bl	8000d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007cc:	bf00      	nop
 80007ce:	37b0      	adds	r7, #176	; 0xb0
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40004400 	.word	0x40004400
 80007d8:	40021000 	.word	0x40021000

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f92a 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <OTG_FS_IRQHandler+0x10>)
 8000836:	f000 fd8a 	bl	800134e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000248c 	.word	0x2000248c

08000844 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <MIDI_DataRx>:
  MIDI_DataRx,
  MIDI_DataTx
};

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
  uint8_t chan = msg[0] & 0x0F;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	f003 030f 	and.w	r3, r3, #15
 800087c:	73fb      	strb	r3, [r7, #15]
  uint8_t msgtype = msg[0] & 0xF0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	f023 030f 	bic.w	r3, r3, #15
 8000886:	73bb      	strb	r3, [r7, #14]
  uint8_t b1 =  msg[2];
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	789b      	ldrb	r3, [r3, #2]
 800088c:	737b      	strb	r3, [r7, #13]
  uint8_t b2 =  msg[3];
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	78db      	ldrb	r3, [r3, #3]
 8000892:	733b      	strb	r3, [r7, #12]
  uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 8000894:	7b3b      	ldrb	r3, [r7, #12]
 8000896:	01db      	lsls	r3, r3, #7
 8000898:	b21b      	sxth	r3, r3
 800089a:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 800089e:	b21a      	sxth	r2, r3
 80008a0:	7b7b      	ldrb	r3, [r7, #13]
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	817b      	strh	r3, [r7, #10]

  switch (msgtype)
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	2bb0      	cmp	r3, #176	; 0xb0
 80008b4:	d01c      	beq.n	80008f0 <MIDI_DataRx+0x88>
 80008b6:	2bb0      	cmp	r3, #176	; 0xb0
 80008b8:	dc05      	bgt.n	80008c6 <MIDI_DataRx+0x5e>
 80008ba:	2b90      	cmp	r3, #144	; 0x90
 80008bc:	d01a      	beq.n	80008f4 <MIDI_DataRx+0x8c>
 80008be:	2ba0      	cmp	r3, #160	; 0xa0
 80008c0:	d01a      	beq.n	80008f8 <MIDI_DataRx+0x90>
 80008c2:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 80008c4:	e01f      	b.n	8000906 <MIDI_DataRx+0x9e>
  switch (msgtype)
 80008c6:	2bd0      	cmp	r3, #208	; 0xd0
 80008c8:	d018      	beq.n	80008fc <MIDI_DataRx+0x94>
 80008ca:	2bd0      	cmp	r3, #208	; 0xd0
 80008cc:	dc01      	bgt.n	80008d2 <MIDI_DataRx+0x6a>
 80008ce:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 80008d0:	e019      	b.n	8000906 <MIDI_DataRx+0x9e>
  switch (msgtype)
 80008d2:	2be0      	cmp	r3, #224	; 0xe0
 80008d4:	d014      	beq.n	8000900 <MIDI_DataRx+0x98>
 80008d6:	2bf0      	cmp	r3, #240	; 0xf0
 80008d8:	d115      	bne.n	8000906 <MIDI_DataRx+0x9e>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 80008da:	7b7b      	ldrb	r3, [r7, #13]
 80008dc:	2b7e      	cmp	r3, #126	; 0x7e
 80008de:	d111      	bne.n	8000904 <MIDI_DataRx+0x9c>
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	2b7f      	cmp	r3, #127	; 0x7f
 80008e4:	d10e      	bne.n	8000904 <MIDI_DataRx+0x9c>
		  MIDI_DataTx(SysexID, 15);
 80008e6:	210f      	movs	r1, #15
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <MIDI_DataRx+0xa8>)
 80008ea:	f000 f813 	bl	8000914 <MIDI_DataTx>
	  }
	  break;
 80008ee:	e009      	b.n	8000904 <MIDI_DataRx+0x9c>
	  break;
 80008f0:	bf00      	nop
 80008f2:	e008      	b.n	8000906 <MIDI_DataRx+0x9e>
	  break;
 80008f4:	bf00      	nop
 80008f6:	e006      	b.n	8000906 <MIDI_DataRx+0x9e>
	  break;
 80008f8:	bf00      	nop
 80008fa:	e004      	b.n	8000906 <MIDI_DataRx+0x9e>
	  break;
 80008fc:	bf00      	nop
 80008fe:	e002      	b.n	8000906 <MIDI_DataRx+0x9e>
	  break;
 8000900:	bf00      	nop
 8000902:	e000      	b.n	8000906 <MIDI_DataRx+0x9e>
	  break;
 8000904:	bf00      	nop
  }
  }
  return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000004 	.word	0x20000004

08000914 <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 8000924:	e017      	b.n	8000956 <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	441a      	add	r2, r3
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MIDI_DataTx+0x58>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	7811      	ldrb	r1, [r2, #0]
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <MIDI_DataTx+0x5c>)
 8000934:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MIDI_DataTx+0x58>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	4a0b      	ldr	r2, [pc, #44]	; (800096c <MIDI_DataTx+0x58>)
 800093e:	6013      	str	r3, [r2, #0]
    i++;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3301      	adds	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MIDI_DataTx+0x58>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800094e:	d102      	bne.n	8000956 <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MIDI_DataTx+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
  while (i < length) {
 8000956:	887b      	ldrh	r3, [r7, #2]
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	429a      	cmp	r2, r3
 800095c:	d3e3      	bcc.n	8000926 <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 800095e:	f005 fbc7 	bl	80060f0 <USBD_MIDI_SendPacket>
  return USBD_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000214 	.word	0x20000214
 8000970:	20001ebc 	.word	0x20001ebc

08000974 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000978:	f7ff ff64 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	; (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	; (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a2:	f007 fbbf 	bl	8008124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a6:	f7ff fd8f 	bl	80004c8 <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80009b8:	08008234 	.word	0x08008234
  ldr r2, =_sbss
 80009bc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80009c0:	20002998 	.word	0x20002998

080009c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_2_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_Init+0x3c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_Init+0x3c>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009de:	2003      	movs	r0, #3
 80009e0:	f000 f960 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 f80f 	bl	8000a08 <HAL_InitTick>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	e001      	b.n	80009fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f6:	f7ff fe71 	bl	80006dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d023      	beq.n	8000a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_InitTick+0x70>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f96b 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10f      	bne.n	8000a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d809      	bhi.n	8000a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a4c:	f000 f935 	bl	8000cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0x74>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e007      	b.n	8000a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e001      	b.n	8000a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000020 	.word	0x20000020
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	2000001c 	.word	0x2000001c

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000020 	.word	0x20000020
 8000aa4:	20001e78 	.word	0x20001e78

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20001e78 	.word	0x20001e78

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff ffee 	bl	8000aa8 <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_Delay+0x40>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffde 	bl	8000aa8 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000020 	.word	0x20000020

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff3e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff31 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	e17f      	b.n	8001038 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 8171 	beq.w	8001032 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d005      	beq.n	8000d68 <HAL_GPIO_Init+0x40>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d130      	bne.n	8000dca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2203      	movs	r2, #3
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d9e:	2201      	movs	r2, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	f003 0201 	and.w	r2, r3, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d118      	bne.n	8000e08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	08db      	lsrs	r3, r3, #3
 8000df2:	f003 0201 	and.w	r2, r3, #1
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d017      	beq.n	8000e44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d123      	bne.n	8000e98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	6939      	ldr	r1, [r7, #16]
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0203 	and.w	r2, r3, #3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80ac 	beq.w	8001032 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <HAL_GPIO_Init+0x32c>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	4a5d      	ldr	r2, [pc, #372]	; (8001054 <HAL_GPIO_Init+0x32c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee6:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <HAL_GPIO_Init+0x32c>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef2:	4a59      	ldr	r2, [pc, #356]	; (8001058 <HAL_GPIO_Init+0x330>)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f1c:	d025      	beq.n	8000f6a <HAL_GPIO_Init+0x242>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_GPIO_Init+0x334>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d01f      	beq.n	8000f66 <HAL_GPIO_Init+0x23e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <HAL_GPIO_Init+0x338>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0x23a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <HAL_GPIO_Init+0x33c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x236>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4b      	ldr	r2, [pc, #300]	; (8001068 <HAL_GPIO_Init+0x340>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x232>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4a      	ldr	r2, [pc, #296]	; (800106c <HAL_GPIO_Init+0x344>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x22e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a49      	ldr	r2, [pc, #292]	; (8001070 <HAL_GPIO_Init+0x348>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x22a>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e00c      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f52:	2307      	movs	r3, #7
 8000f54:	e00a      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x244>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7c:	4936      	ldr	r1, [pc, #216]	; (8001058 <HAL_GPIO_Init+0x330>)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <HAL_GPIO_Init+0x34c>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fae:	4a31      	ldr	r2, [pc, #196]	; (8001074 <HAL_GPIO_Init+0x34c>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_GPIO_Init+0x34c>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fd8:	4a26      	ldr	r2, [pc, #152]	; (8001074 <HAL_GPIO_Init+0x34c>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <HAL_GPIO_Init+0x34c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_GPIO_Init+0x34c>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_GPIO_Init+0x34c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_GPIO_Init+0x34c>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa22 f303 	lsr.w	r3, r2, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	f47f ae78 	bne.w	8000d38 <HAL_GPIO_Init+0x10>
  }
}
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	48000400 	.word	0x48000400
 8001060:	48000800 	.word	0x48000800
 8001064:	48000c00 	.word	0x48000c00
 8001068:	48001000 	.word	0x48001000
 800106c:	48001400 	.word	0x48001400
 8001070:	48001800 	.word	0x48001800
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b08f      	sub	sp, #60	; 0x3c
 80010ac:	af0a      	add	r7, sp, #40	; 0x28
 80010ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e116      	b.n	80012e8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d106      	bne.n	80010da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f006 fbe1 	bl	800789c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fa36 	bl	800456a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	687e      	ldr	r6, [r7, #4]
 8001106:	466d      	mov	r5, sp
 8001108:	f106 0410 	add.w	r4, r6, #16
 800110c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001114:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001118:	e885 0003 	stmia.w	r5, {r0, r1}
 800111c:	1d33      	adds	r3, r6, #4
 800111e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f003 f948 	bl	80043b6 <USB_CoreInit>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0d7      	b.n	80012e8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fa24 	bl	800458c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e04a      	b.n	80011e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	333d      	adds	r3, #61	; 0x3d
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	333c      	adds	r3, #60	; 0x3c
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	b298      	uxth	r0, r3
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	3344      	adds	r3, #68	; 0x44
 8001186:	4602      	mov	r2, r0
 8001188:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	3340      	adds	r3, #64	; 0x40
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	3348      	adds	r3, #72	; 0x48
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	334c      	adds	r3, #76	; 0x4c
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	3354      	adds	r3, #84	; 0x54
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3301      	adds	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3af      	bcc.n	800114a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e044      	b.n	800127a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	3301      	adds	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	d3b5      	bcc.n	80011f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	687e      	ldr	r6, [r7, #4]
 800128c:	466d      	mov	r5, sp
 800128e:	f106 0410 	add.w	r4, r6, #16
 8001292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800129e:	e885 0003 	stmia.w	r5, {r0, r1}
 80012a2:	1d33      	adds	r3, r6, #4
 80012a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f003 f9bc 	bl	8004624 <USB_DevInit>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2202      	movs	r2, #2
 80012b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e014      	b.n	80012e8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d102      	bne.n	80012dc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f001 f882 	bl	80023e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 fa44 	bl	800576e <USB_DevDisconnect>

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_PCD_Start+0x1c>
 8001308:	2302      	movs	r3, #2
 800130a:	e01c      	b.n	8001346 <HAL_PCD_Start+0x56>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001320:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f003 f90b 	bl	8004548 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f004 f9f8 	bl	800572c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800134e:	b590      	push	{r4, r7, lr}
 8001350:	b08d      	sub	sp, #52	; 0x34
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f004 fab6 	bl	80058d6 <USB_GetMode>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 847e 	bne.w	8001c6e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f004 fa1a 	bl	80057b0 <USB_ReadInterrupts>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8474 	beq.w	8001c6c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fa07 	bl	80057b0 <USB_ReadInterrupts>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d107      	bne.n	80013bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f002 0202 	and.w	r2, r2, #2
 80013ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 f9f5 	bl	80057b0 <USB_ReadInterrupts>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	d161      	bne.n	8001494 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0210 	bic.w	r2, r2, #16
 80013de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f003 020f 	and.w	r2, r3, #15
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	3304      	adds	r3, #4
 80013fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	0c5b      	lsrs	r3, r3, #17
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	2b02      	cmp	r3, #2
 800140a:	d124      	bne.n	8001456 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d035      	beq.n	8001484 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001426:	b29b      	uxth	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	6a38      	ldr	r0, [r7, #32]
 800142c:	f004 f82c 	bl	8005488 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143c:	441a      	add	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144e:	441a      	add	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	621a      	str	r2, [r3, #32]
 8001454:	e016      	b.n	8001484 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	0c5b      	lsrs	r3, r3, #17
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	2b06      	cmp	r3, #6
 8001460:	d110      	bne.n	8001484 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001468:	2208      	movs	r2, #8
 800146a:	4619      	mov	r1, r3
 800146c:	6a38      	ldr	r0, [r7, #32]
 800146e:	f004 f80b 	bl	8005488 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800147e:	441a      	add	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699a      	ldr	r2, [r3, #24]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0210 	orr.w	r2, r2, #16
 8001492:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f004 f989 	bl	80057b0 <USB_ReadInterrupts>
 800149e:	4603      	mov	r3, r0
 80014a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014a8:	f040 80a7 	bne.w	80015fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 f98e 	bl	80057d6 <USB_ReadDevAllOutEpInterrupt>
 80014ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014bc:	e099      	b.n	80015f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 808e 	beq.w	80015e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 f9b2 	bl	800583e <USB_ReadDevOutEPInterrupt>
 80014da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00c      	beq.n	8001500 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2301      	movs	r3, #1
 80014f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fe96 	bl	800222c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00c      	beq.n	8001524 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001516:	461a      	mov	r2, r3
 8001518:	2308      	movs	r3, #8
 800151a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800151c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fed2 	bl	80022c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153a:	461a      	mov	r2, r3
 800153c:	2310      	movs	r3, #16
 800153e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d030      	beq.n	80015ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	2b80      	cmp	r3, #128	; 0x80
 8001554:	d109      	bne.n	800156a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001568:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	3304      	adds	r3, #4
 800157e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d108      	bne.n	800159a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2200      	movs	r2, #0
 800158c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f006 fad5 	bl	8007b44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a6:	461a      	mov	r2, r3
 80015a8:	2302      	movs	r3, #2
 80015aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c2:	461a      	mov	r2, r3
 80015c4:	2320      	movs	r3, #32
 80015c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	015a      	lsls	r2, r3, #5
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015de:	461a      	mov	r2, r3
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	3301      	adds	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	085b      	lsrs	r3, r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f47f af62 	bne.w	80014be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 f8d6 	bl	80057b0 <USB_ReadInterrupts>
 8001604:	4603      	mov	r3, r0
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800160e:	f040 80a4 	bne.w	800175a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f004 f8f7 	bl	800580a <USB_ReadDevAllInEpInterrupt>
 800161c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001622:	e096      	b.n	8001752 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 808b 	beq.w	8001746 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f004 f91d 	bl	800587a <USB_ReadDevInEPInterrupt>
 8001640:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	2201      	movs	r2, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43db      	mvns	r3, r3
 8001666:	69f9      	ldr	r1, [r7, #28]
 8001668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800166c:	4013      	ands	r3, r2
 800166e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167c:	461a      	mov	r2, r3
 800167e:	2301      	movs	r3, #1
 8001680:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f006 f9c6 	bl	8007a1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	015a      	lsls	r2, r3, #5
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	4413      	add	r3, r2
 80016a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a4:	461a      	mov	r2, r3
 80016a6:	2308      	movs	r3, #8
 80016a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c0:	461a      	mov	r2, r3
 80016c2:	2310      	movs	r3, #16
 80016c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	015a      	lsls	r2, r3, #5
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016dc:	461a      	mov	r2, r3
 80016de:	2340      	movs	r3, #64	; 0x40
 80016e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ee:	6a38      	ldr	r0, [r7, #32]
 80016f0:	f003 f8e4 	bl	80048bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	3338      	adds	r3, #56	; 0x38
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	3304      	adds	r3, #4
 8001706:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	78db      	ldrb	r3, [r3, #3]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2200      	movs	r2, #0
 8001714:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4619      	mov	r1, r3
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f006 fa23 	bl	8007b68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172e:	461a      	mov	r2, r3
 8001730:	2302      	movs	r3, #2
 8001732:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800173e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fcea 	bl	800211a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	3301      	adds	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001754:	2b00      	cmp	r3, #0
 8001756:	f47f af65 	bne.w	8001624 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f004 f826 	bl	80057b0 <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800176a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800176e:	d122      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001796:	2100      	movs	r1, #0
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f006 fc57 	bl	800804c <HAL_PCDEx_LPM_Callback>
 800179e:	e002      	b.n	80017a6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f006 f9a7 	bl	8007af4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fff8 	bl	80057b0 <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ca:	d112      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d102      	bne.n	80017e2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f006 f963 	bl	8007aa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 ffda 	bl	80057b0 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001806:	d121      	bne.n	800184c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001816:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800181e:	2b00      	cmp	r3, #0
 8001820:	d111      	bne.n	8001846 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	f003 020f 	and.w	r2, r3, #15
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800183c:	2101      	movs	r1, #1
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f006 fc04 	bl	800804c <HAL_PCDEx_LPM_Callback>
 8001844:	e002      	b.n	800184c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f006 f92e 	bl	8007aa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f003 ffad 	bl	80057b0 <USB_ReadInterrupts>
 8001856:	4603      	mov	r3, r0
 8001858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001860:	f040 80b5 	bne.w	80019ce <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2110      	movs	r1, #16
 800187e:	4618      	mov	r0, r3
 8001880:	f003 f81c 	bl	80048bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001888:	e046      	b.n	8001918 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001896:	461a      	mov	r2, r3
 8001898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800189c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ae:	0151      	lsls	r1, r2, #5
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	440a      	add	r2, r1
 80018b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ca:	461a      	mov	r2, r3
 80018cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e2:	0151      	lsls	r1, r2, #5
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	440a      	add	r2, r1
 80018e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001902:	0151      	lsls	r1, r2, #5
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	440a      	add	r2, r1
 8001908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800190c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001910:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	3301      	adds	r3, #1
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191e:	429a      	cmp	r2, r3
 8001920:	d3b3      	bcc.n	800188a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001930:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001934:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194e:	f043 030b 	orr.w	r3, r3, #11
 8001952:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001964:	f043 030b 	orr.w	r3, r3, #11
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	e015      	b.n	8001998 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800197a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800197e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001982:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001992:	f043 030b 	orr.w	r3, r3, #11
 8001996:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4610      	mov	r0, r2
 80019ba:	f003 ffbd 	bl	8005938 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 feec 	bl	80057b0 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e2:	d124      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 ff82 	bl	80058f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 ffdf 	bl	80049b6 <USB_GetDevSpeed>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681c      	ldr	r4, [r3, #0]
 8001a04:	f001 faf8 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8001a08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4620      	mov	r0, r4
 8001a14:	f002 fcfc 	bl	8004410 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f006 f826 	bl	8007a6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 febc 	bl	80057b0 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d10a      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f006 f803 	bl	8007a4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f002 0208 	and.w	r2, r2, #8
 8001a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fea7 	bl	80057b0 <USB_ReadInterrupts>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b80      	cmp	r3, #128	; 0x80
 8001a6a:	d122      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a78:	2301      	movs	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	e014      	b.n	8001aa8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d105      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fb0b 	bl	80020b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3e5      	bcc.n	8001a7e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fe7a 	bl	80057b0 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ac6:	d13b      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
 8001acc:	e02b      	b.n	8001b26 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	3340      	adds	r3, #64	; 0x40
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d115      	bne.n	8001b20 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001af4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da12      	bge.n	8001b20 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	333f      	adds	r3, #63	; 0x3f
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 facc 	bl	80020b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	3301      	adds	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d3ce      	bcc.n	8001ace <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fe33 	bl	80057b0 <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b54:	d155      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b56:	2301      	movs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5a:	e045      	b.n	8001be8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d12e      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da2b      	bge.n	8001be2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b96:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d121      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10a      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6053      	str	r3, [r2, #4]
            break;
 8001be0:	e007      	b.n	8001bf2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3b4      	bcc.n	8001b5c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fdd2 	bl	80057b0 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c16:	d10a      	bne.n	8001c2e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f005 ffb7 	bl	8007b8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fdbc 	bl	80057b0 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d115      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f005 ffa7 	bl	8007ba8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	e000      	b.n	8001c6e <HAL_PCD_IRQHandler+0x920>
      return;
 8001c6c:	bf00      	nop
    }
  }
}
 8001c6e:	3734      	adds	r7, #52	; 0x34
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}

08001c74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_SetAddress+0x1a>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e013      	b.n	8001cb6 <HAL_PCD_SetAddress+0x42>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fd1a 	bl	80056e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	4608      	mov	r0, r1
 8001cc8:	4611      	mov	r1, r2
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	70fb      	strb	r3, [r7, #3]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	803b      	strh	r3, [r7, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da0f      	bge.n	8001d04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 020f 	and.w	r2, r3, #15
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	3338      	adds	r3, #56	; 0x38
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	705a      	strb	r2, [r3, #1]
 8001d02:	e00f      	b.n	8001d24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 020f 	and.w	r2, r3, #15
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d30:	883a      	ldrh	r2, [r7, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	78ba      	ldrb	r2, [r7, #2]
 8001d3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d4e:	78bb      	ldrb	r3, [r7, #2]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d102      	bne.n	8001d5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_EP_Open+0xaa>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e00e      	b.n	8001d86 <HAL_PCD_EP_Open+0xc8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fe3c 	bl	80049f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d84:	7afb      	ldrb	r3, [r7, #11]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0f      	bge.n	8001dc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f003 020f 	and.w	r2, r3, #15
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	3338      	adds	r3, #56	; 0x38
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	705a      	strb	r2, [r3, #1]
 8001dc0:	e00f      	b.n	8001de2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_PCD_EP_Close+0x6e>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e00e      	b.n	8001e1a <HAL_PCD_EP_Close+0x8c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fe7a 	bl	8004b04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2200      	movs	r2, #0
 8001e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6979      	ldr	r1, [r7, #20]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 f8fb 	bl	800507c <USB_EP0StartXfer>
 8001e86:	e005      	b.n	8001e94 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6979      	ldr	r1, [r7, #20]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 ff14 	bl	8004cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	f003 020f 	and.w	r2, r3, #15
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001ec0:	681b      	ldr	r3, [r3, #0]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	460b      	mov	r3, r1
 8001edc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	3338      	adds	r3, #56	; 0x38
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6979      	ldr	r1, [r7, #20]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 f8a6 	bl	800507c <USB_EP0StartXfer>
 8001f30:	e005      	b.n	8001f3e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6979      	ldr	r1, [r7, #20]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 febf 	bl	8004cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 020f 	and.w	r2, r3, #15
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d901      	bls.n	8001f66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e04e      	b.n	8002004 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	da0f      	bge.n	8001f8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 020f 	and.w	r2, r3, #15
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3338      	adds	r3, #56	; 0x38
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	705a      	strb	r2, [r3, #1]
 8001f8c:	e00d      	b.n	8001faa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_PCD_EP_SetStall+0x82>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e01c      	b.n	8002004 <HAL_PCD_EP_SetStall+0xbc>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68f9      	ldr	r1, [r7, #12]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 faad 	bl	8005538 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f003 fc9f 	bl	8005938 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	f003 020f 	and.w	r2, r3, #15
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d901      	bls.n	800202a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e042      	b.n	80020b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800202a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800202e:	2b00      	cmp	r3, #0
 8002030:	da0f      	bge.n	8002052 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 020f 	and.w	r2, r3, #15
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	3338      	adds	r3, #56	; 0x38
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	3304      	adds	r3, #4
 8002048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	705a      	strb	r2, [r3, #1]
 8002050:	e00f      	b.n	8002072 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 020f 	and.w	r2, r3, #15
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	3304      	adds	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b2da      	uxtb	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_PCD_EP_ClrStall+0x86>
 800208e:	2302      	movs	r3, #2
 8002090:	e00e      	b.n	80020b0 <HAL_PCD_EP_ClrStall+0xa4>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68f9      	ldr	r1, [r7, #12]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 fab7 	bl	8005614 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da0c      	bge.n	80020e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 020f 	and.w	r2, r3, #15
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	3338      	adds	r3, #56	; 0x38
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e00c      	b.n	8002100 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68f9      	ldr	r1, [r7, #12]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 f8da 	bl	80052c0 <USB_EPStopXfer>
 800210c:	4603      	mov	r3, r0
 800210e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002110:	7afb      	ldrb	r3, [r7, #11]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b088      	sub	sp, #32
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	3338      	adds	r3, #56	; 0x38
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a1a      	ldr	r2, [r3, #32]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	429a      	cmp	r2, r3
 800214c:	d901      	bls.n	8002152 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e067      	b.n	8002222 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	429a      	cmp	r2, r3
 8002166:	d902      	bls.n	800216e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3303      	adds	r3, #3
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002176:	e026      	b.n	80021c6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	429a      	cmp	r2, r3
 800218c:	d902      	bls.n	8002194 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3303      	adds	r3, #3
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6919      	ldr	r1, [r3, #16]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	6978      	ldr	r0, [r7, #20]
 80021aa:	f003 f933 	bl	8005414 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	441a      	add	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	441a      	add	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d809      	bhi.n	80021f0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d203      	bcs.n	80021f0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1c3      	bne.n	8002178 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d811      	bhi.n	8002220 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	2201      	movs	r2, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	43db      	mvns	r3, r3
 8002216:	6939      	ldr	r1, [r7, #16]
 8002218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800221c:	4013      	ands	r3, r2
 800221e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	333c      	adds	r3, #60	; 0x3c
 8002244:	3304      	adds	r3, #4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <PCD_EP_OutXfrComplete_int+0x98>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d124      	bne.n	80022ac <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002278:	461a      	mov	r2, r3
 800227a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800227e:	6093      	str	r3, [r2, #8]
 8002280:	e01a      	b.n	80022b8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002298:	461a      	mov	r2, r3
 800229a:	2320      	movs	r3, #32
 800229c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	4619      	mov	r1, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f005 fb9d 	bl	80079e4 <HAL_PCD_DataOutStageCallback>
 80022aa:	e005      	b.n	80022b8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f005 fb96 	bl	80079e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	4f54310a 	.word	0x4f54310a

080022c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	333c      	adds	r3, #60	; 0x3c
 80022e0:	3304      	adds	r3, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <PCD_EP_OutSetupPacket_int+0x64>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d90e      	bls.n	800231c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002314:	461a      	mov	r2, r3
 8002316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800231a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f005 fb4f 	bl	80079c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	4f54300a 	.word	0x4f54300a

08002330 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
 800233c:	4613      	mov	r3, r2
 800233e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800234e:	883b      	ldrh	r3, [r7, #0]
 8002350:	0419      	lsls	r1, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	430a      	orrs	r2, r1
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
 800235c:	e028      	b.n	80023b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4413      	add	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e00d      	b.n	800238e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	3340      	adds	r3, #64	; 0x40
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4413      	add	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	3b01      	subs	r3, #1
 8002394:	429a      	cmp	r2, r3
 8002396:	d3ec      	bcc.n	8002372 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002398:	883b      	ldrh	r3, [r7, #0]
 800239a:	0418      	lsls	r0, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	4302      	orrs	r2, r0
 80023a8:	3340      	adds	r3, #64	; 0x40
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002412:	f043 0303 	orr.w	r3, r3, #3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000

08002448 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <HAL_PWREx_GetVoltageRange+0x18>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000

08002464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002472:	d130      	bne.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800247c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002480:	d038      	beq.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800248a:	4a1e      	ldr	r2, [pc, #120]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2232      	movs	r2, #50	; 0x32
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	0c9b      	lsrs	r3, r3, #18
 80024a4:	3301      	adds	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a8:	e002      	b.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024bc:	d102      	bne.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f2      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d0:	d110      	bne.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e00f      	b.n	80024f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e2:	d007      	beq.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ec:	4a05      	ldr	r2, [pc, #20]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40007000 	.word	0x40007000
 8002508:	20000000 	.word	0x20000000
 800250c:	431bde83 	.word	0x431bde83

08002510 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_PWREx_EnableVddUSB+0x1c>)
 800251a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251e:	6053      	str	r3, [r2, #4]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40007000 	.word	0x40007000

08002530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e3c6      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002542:	4ba1      	ldr	r3, [pc, #644]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800254c:	4b9e      	ldr	r3, [pc, #632]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80e4 	beq.w	800272c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_RCC_OscConfig+0x4a>
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	f040 808b 	bne.w	8002688 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b01      	cmp	r3, #1
 8002576:	f040 8087 	bne.w	8002688 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800257a:	4b93      	ldr	r3, [pc, #588]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x62>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e39e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	4b8c      	ldr	r3, [pc, #560]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_RCC_OscConfig+0x7c>
 80025a2:	4b89      	ldr	r3, [pc, #548]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_OscConfig+0x88>
 80025ac:	4b86      	ldr	r3, [pc, #536]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d223      	bcs.n	8002604 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fd51 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e37f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d0:	4b7d      	ldr	r3, [pc, #500]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a7c      	ldr	r2, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025d6:	f043 0308 	orr.w	r3, r3, #8
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b7a      	ldr	r3, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4977      	ldr	r1, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ee:	4b76      	ldr	r3, [pc, #472]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	4972      	ldr	r1, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
 8002602:	e025      	b.n	8002650 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002604:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6f      	ldr	r2, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800260a:	f043 0308 	orr.w	r3, r3, #8
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	496a      	ldr	r1, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002622:	4b69      	ldr	r3, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	4965      	ldr	r1, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fd11 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e33f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002650:	f000 fc48 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002654:	4601      	mov	r1, r0
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	4a5a      	ldr	r2, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x29c>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa21 f303 	lsr.w	r3, r1, r3
 800266c:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_RCC_OscConfig+0x2a0>)
 800266e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002670:	4b58      	ldr	r3, [pc, #352]	; (80027d4 <HAL_RCC_OscConfig+0x2a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe f9c7 	bl	8000a08 <HAL_InitTick>
 800267a:	4603      	mov	r3, r0
 800267c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d052      	beq.n	800272a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	e323      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d032      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002690:	4b4d      	ldr	r3, [pc, #308]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4c      	ldr	r2, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800269c:	f7fe fa04 	bl	8000aa8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a4:	f7fe fa00 	bl	8000aa8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e30c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a40      	ldr	r2, [pc, #256]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	493b      	ldr	r1, [pc, #236]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	4936      	ldr	r1, [pc, #216]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
 80026f4:	e01a      	b.n	800272c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002702:	f7fe f9d1 	bl	8000aa8 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800270a:	f7fe f9cd 	bl	8000aa8 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e2d9      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x1da>
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800272a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d074      	beq.n	8002822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x21a>
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b0c      	cmp	r3, #12
 8002742:	d10e      	bne.n	8002762 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d10b      	bne.n	8002762 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d064      	beq.n	8002820 <HAL_RCC_OscConfig+0x2f0>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d160      	bne.n	8002820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e2b6      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x24a>
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e01d      	b.n	80027b6 <HAL_RCC_OscConfig+0x286>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002782:	d10c      	bne.n	800279e <HAL_RCC_OscConfig+0x26e>
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800278a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e00b      	b.n	80027b6 <HAL_RCC_OscConfig+0x286>
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe f973 	bl	8000aa8 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c4:	e011      	b.n	80027ea <HAL_RCC_OscConfig+0x2ba>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	080081dc 	.word	0x080081dc
 80027d0:	20000000 	.word	0x20000000
 80027d4:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe f966 	bl	8000aa8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e272      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ea:	4baf      	ldr	r3, [pc, #700]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2a8>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe f956 	bl	8000aa8 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe f952 	bl	8000aa8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e25e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002812:	4ba5      	ldr	r3, [pc, #660]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x2d0>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d060      	beq.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x310>
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d119      	bne.n	800286e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d116      	bne.n	800286e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002840:	4b99      	ldr	r3, [pc, #612]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x328>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e23b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b93      	ldr	r3, [pc, #588]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	4990      	ldr	r1, [pc, #576]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286c:	e040      	b.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d023      	beq.n	80028be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002876:	4b8c      	ldr	r3, [pc, #560]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a8b      	ldr	r2, [pc, #556]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe f911 	bl	8000aa8 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe f90d 	bl	8000aa8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e219      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289c:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	497c      	ldr	r1, [pc, #496]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
 80028bc:	e018      	b.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b7a      	ldr	r3, [pc, #488]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a79      	ldr	r2, [pc, #484]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe f8ed 	bl	8000aa8 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d2:	f7fe f8e9 	bl	8000aa8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1f5      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e4:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03c      	beq.n	8002976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01c      	beq.n	800293e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe f8c8 	bl	8000aa8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe f8c4 	bl	8000aa8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1d0      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800292e:	4b5e      	ldr	r3, [pc, #376]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <HAL_RCC_OscConfig+0x3ec>
 800293c:	e01b      	b.n	8002976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293e:	4b5a      	ldr	r3, [pc, #360]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe f8ab 	bl	8000aa8 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe f8a7 	bl	8000aa8 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1b3      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ef      	bne.n	8002956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80a6 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002988:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10d      	bne.n	80029b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	4a43      	ldr	r2, [pc, #268]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299e:	6593      	str	r3, [r2, #88]	; 0x58
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d118      	bne.n	80029ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3a      	ldr	r2, [pc, #232]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c8:	f7fe f86e 	bl	8000aa8 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d0:	f7fe f86a 	bl	8000aa8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e176      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d108      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4d8>
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a06:	e024      	b.n	8002a52 <HAL_RCC_OscConfig+0x522>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d110      	bne.n	8002a32 <HAL_RCC_OscConfig+0x502>
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a30:	e00f      	b.n	8002a52 <HAL_RCC_OscConfig+0x522>
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe f825 	bl	8000aa8 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe f821 	bl	8000aa8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e12b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ed      	beq.n	8002a62 <HAL_RCC_OscConfig+0x532>
 8002a86:	e01a      	b.n	8002abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe f80e 	bl	8000aa8 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a8e:	e00f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe f80a 	bl	8000aa8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d906      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e114      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab0:	4b89      	ldr	r3, [pc, #548]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e8      	bne.n	8002a90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4b84      	ldr	r3, [pc, #528]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	4a83      	ldr	r2, [pc, #524]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ace:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80fa 	beq.w	8002cce <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	f040 80d0 	bne.w	8002c84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ae4:	4b7c      	ldr	r3, [pc, #496]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0203 	and.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d130      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	3b01      	subs	r3, #1
 8002b04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d127      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d11f      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b24:	2a07      	cmp	r2, #7
 8002b26:	bf14      	ite	ne
 8002b28:	2201      	movne	r2, #1
 8002b2a:	2200      	moveq	r2, #0
 8002b2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d113      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	3b01      	subs	r3, #1
 8002b54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d06e      	beq.n	8002c38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d069      	beq.n	8002c34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b60:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0a9      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b7c:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b88:	f7fd ff8e 	bl	8000aa8 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fd ff8a 	bl	8000aa8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e096      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bae:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_RCC_OscConfig+0x7ac>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bbe:	3a01      	subs	r2, #1
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc8:	0212      	lsls	r2, r2, #8
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bd0:	0852      	lsrs	r2, r2, #1
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	0552      	lsls	r2, r2, #21
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bdc:	0852      	lsrs	r2, r2, #1
 8002bde:	3a01      	subs	r2, #1
 8002be0:	0652      	lsls	r2, r2, #25
 8002be2:	4311      	orrs	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002be8:	0912      	lsrs	r2, r2, #4
 8002bea:	0452      	lsls	r2, r2, #17
 8002bec:	430a      	orrs	r2, r1
 8002bee:	493a      	ldr	r1, [pc, #232]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a37      	ldr	r2, [pc, #220]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a34      	ldr	r2, [pc, #208]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c0c:	f7fd ff4c 	bl	8000aa8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fd ff48 	bl	8000aa8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e054      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c32:	e04c      	b.n	8002cce <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e04b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d144      	bne.n	8002cce <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c5c:	f7fd ff24 	bl	8000aa8 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fd ff20 	bl	8000aa8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e02c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x734>
 8002c82:	e024      	b.n	8002cce <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d01f      	beq.n	8002cca <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fd ff07 	bl	8000aa8 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fd ff03 	bl	8000aa8 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e00f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	4905      	ldr	r1, [pc, #20]	; (8002cd8 <HAL_RCC_OscConfig+0x7a8>)
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <HAL_RCC_OscConfig+0x7b0>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
 8002cc8:	e001      	b.n	8002cce <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	f99d808c 	.word	0xf99d808c
 8002ce0:	feeefffc 	.word	0xfeeefffc

08002ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0e7      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b75      	ldr	r3, [pc, #468]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d910      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b72      	ldr	r3, [pc, #456]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	4970      	ldr	r1, [pc, #448]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b6e      	ldr	r3, [pc, #440]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0cf      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d010      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d908      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4960      	ldr	r1, [pc, #384]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d04c      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6a:	4b5a      	ldr	r3, [pc, #360]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d121      	bne.n	8002dba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0a6      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d82:	4b54      	ldr	r3, [pc, #336]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d115      	bne.n	8002dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e09a      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e08e      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002daa:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e086      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4943      	ldr	r1, [pc, #268]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dcc:	f7fd fe6c 	bl	8000aa8 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fd fe68 	bl	8000aa8 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e06e      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d208      	bcs.n	8002e2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	492b      	ldr	r1, [pc, #172]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2a:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d210      	bcs.n	8002e5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 0207 	bic.w	r2, r3, #7
 8002e40:	4923      	ldr	r1, [pc, #140]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e036      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4918      	ldr	r1, [pc, #96]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4910      	ldr	r1, [pc, #64]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e98:	f000 f824 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002e9c:	4601      	mov	r1, r0
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x1f4>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8002eb4:	4a09      	ldr	r2, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1f8>)
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_ClockConfig+0x1fc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fda3 	bl	8000a08 <HAL_InitTick>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40022000 	.word	0x40022000
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	080081dc 	.word	0x080081dc
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	2000001c 	.word	0x2000001c

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002efc:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x34>
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d121      	bne.n	8002f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d11e      	bne.n	8002f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f18:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f24:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e005      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f34:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f40:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10d      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d102      	bne.n	8002f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e004      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d133      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0xa4>
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0xaa>
 8002f86:	e005      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f8a:	617b      	str	r3, [r7, #20]
      break;
 8002f8c:	e005      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f90:	617b      	str	r3, [r7, #20]
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	617b      	str	r3, [r7, #20]
      break;
 8002f98:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	fb02 f203 	mul.w	r2, r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0e5b      	lsrs	r3, r3, #25
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fda:	69bb      	ldr	r3, [r7, #24]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3724      	adds	r7, #36	; 0x24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	080081f4 	.word	0x080081f4
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003014:	f7ff fff0 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003018:	4601      	mov	r1, r0
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4a04      	ldr	r2, [pc, #16]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003026:	5cd3      	ldrb	r3, [r2, r3]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	080081ec 	.word	0x080081ec

0800303c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003040:	f7ff ffda 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003044:	4601      	mov	r1, r0
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0adb      	lsrs	r3, r3, #11
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003052:	5cd3      	ldrb	r3, [r2, r3]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	fa21 f303 	lsr.w	r3, r1, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	080081ec 	.word	0x080081ec

08003068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003074:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003080:	f7ff f9e2 	bl	8002448 <HAL_PWREx_GetVoltageRange>
 8003084:	6178      	str	r0, [r7, #20]
 8003086:	e014      	b.n	80030b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a24      	ldr	r2, [pc, #144]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030a0:	f7ff f9d2 	bl	8002448 <HAL_PWREx_GetVoltageRange>
 80030a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b8:	d10b      	bne.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d919      	bls.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2ba0      	cmp	r3, #160	; 0xa0
 80030c4:	d902      	bls.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c6:	2302      	movs	r3, #2
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	e013      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030cc:	2301      	movs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e010      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d902      	bls.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030d8:	2303      	movs	r3, #3
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e00a      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b80      	cmp	r3, #128	; 0x80
 80030e2:	d102      	bne.n	80030ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030e4:	2302      	movs	r3, #2
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	e004      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b70      	cmp	r3, #112	; 0x70
 80030ee:	d101      	bne.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f0:	2301      	movs	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 0207 	bic.w	r2, r3, #7
 80030fc:	4909      	ldr	r1, [pc, #36]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003104:	4b07      	ldr	r3, [pc, #28]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	40022000 	.word	0x40022000

08003128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003130:	2300      	movs	r3, #0
 8003132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003134:	2300      	movs	r3, #0
 8003136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003140:	2b00      	cmp	r3, #0
 8003142:	d03f      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314c:	d01c      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800314e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003152:	d802      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003158:	e01f      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800315a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800315e:	d003      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003160:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003164:	d01c      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003166:	e018      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003168:	4b85      	ldr	r3, [pc, #532]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a84      	ldr	r2, [pc, #528]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003174:	e015      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fac9 	bl	8003714 <RCCEx_PLLSAI1_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003186:	e00c      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3320      	adds	r3, #32
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fbb0 	bl	80038f4 <RCCEx_PLLSAI2_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003198:	e003      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	74fb      	strb	r3, [r7, #19]
      break;
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80031a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031a8:	4b75      	ldr	r3, [pc, #468]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b6:	4972      	ldr	r1, [pc, #456]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031be:	e001      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03f      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d8:	d01c      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80031da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031de:	d802      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80031e4:	e01f      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ea:	d003      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80031ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031f0:	d01c      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80031f2:	e018      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031f4:	4b62      	ldr	r3, [pc, #392]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4a61      	ldr	r2, [pc, #388]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003200:	e015      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fa83 	bl	8003714 <RCCEx_PLLSAI1_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003212:	e00c      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3320      	adds	r3, #32
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fb6a 	bl	80038f4 <RCCEx_PLLSAI2_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003224:	e003      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	74fb      	strb	r3, [r7, #19]
      break;
 800322a:	e000      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800322c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10b      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003234:	4b52      	ldr	r3, [pc, #328]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003242:	494f      	ldr	r1, [pc, #316]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800324a:	e001      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80a0 	beq.w	800339e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00d      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	4a40      	ldr	r2, [pc, #256]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003282:	6593      	str	r3, [r2, #88]	; 0x58
 8003284:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003290:	2301      	movs	r3, #1
 8003292:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003294:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3a      	ldr	r2, [pc, #232]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800329a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032a0:	f7fd fc02 	bl	8000aa8 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a6:	e009      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a8:	f7fd fbfe 	bl	8000aa8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d902      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	74fb      	strb	r3, [r7, #19]
        break;
 80032ba:	e005      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032bc:	4b31      	ldr	r3, [pc, #196]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ef      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80032c8:	7cfb      	ldrb	r3, [r7, #19]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d15c      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032ce:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01f      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d019      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032ec:	4b24      	ldr	r3, [pc, #144]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	4a20      	ldr	r2, [pc, #128]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003318:	4a19      	ldr	r2, [pc, #100]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fd fbbd 	bl	8000aa8 <HAL_GetTick>
 800332e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003330:	e00b      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fd fbb9 	bl	8000aa8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d902      	bls.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	74fb      	strb	r3, [r7, #19]
            break;
 8003348:	e006      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ec      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336e:	4904      	ldr	r1, [pc, #16]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003376:	e009      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
 800337c:	e006      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338c:	7c7b      	ldrb	r3, [r7, #17]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d105      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003392:	4b9e      	ldr	r3, [pc, #632]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	4a9d      	ldr	r2, [pc, #628]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033aa:	4b98      	ldr	r3, [pc, #608]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f023 0203 	bic.w	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	4994      	ldr	r1, [pc, #592]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033cc:	4b8f      	ldr	r3, [pc, #572]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f023 020c 	bic.w	r2, r3, #12
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	498c      	ldr	r1, [pc, #560]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033ee:	4b87      	ldr	r3, [pc, #540]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	4983      	ldr	r1, [pc, #524]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003410:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	497b      	ldr	r1, [pc, #492]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003432:	4b76      	ldr	r3, [pc, #472]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	4972      	ldr	r1, [pc, #456]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003454:	4b6d      	ldr	r3, [pc, #436]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	496a      	ldr	r1, [pc, #424]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003476:	4b65      	ldr	r3, [pc, #404]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	4961      	ldr	r1, [pc, #388]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003498:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a6:	4959      	ldr	r1, [pc, #356]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ba:	4b54      	ldr	r3, [pc, #336]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	4950      	ldr	r1, [pc, #320]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034dc:	4b4b      	ldr	r3, [pc, #300]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	4948      	ldr	r1, [pc, #288]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034fe:	4b43      	ldr	r3, [pc, #268]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	493f      	ldr	r1, [pc, #252]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d028      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003520:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352e:	4937      	ldr	r1, [pc, #220]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800353e:	d106      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a31      	ldr	r2, [pc, #196]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354a:	60d3      	str	r3, [r2, #12]
 800354c:	e011      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003552:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003556:	d10c      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f8d8 	bl	8003714 <RCCEx_PLLSAI1_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d028      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800357e:	4b23      	ldr	r3, [pc, #140]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	491f      	ldr	r1, [pc, #124]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359c:	d106      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4a1a      	ldr	r2, [pc, #104]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a8:	60d3      	str	r3, [r2, #12]
 80035aa:	e011      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2101      	movs	r1, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f8a9 	bl	8003714 <RCCEx_PLLSAI1_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02b      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ea:	4908      	ldr	r1, [pc, #32]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fa:	d109      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a02      	ldr	r2, [pc, #8]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003606:	60d3      	str	r3, [r2, #12]
 8003608:	e014      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003618:	d10c      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	2101      	movs	r1, #1
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f877 	bl	8003714 <RCCEx_PLLSAI1_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d02f      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800364e:	4928      	ldr	r1, [pc, #160]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800365a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800365e:	d10d      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	2102      	movs	r1, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f854 	bl	8003714 <RCCEx_PLLSAI1_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d014      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	74bb      	strb	r3, [r7, #18]
 800367a:	e011      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3320      	adds	r3, #32
 800368a:	2102      	movs	r1, #2
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f931 	bl	80038f4 <RCCEx_PLLSAI2_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036ac:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ba:	490d      	ldr	r1, [pc, #52]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036de:	4904      	ldr	r1, [pc, #16]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000

080036f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000

08003714 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003722:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800372e:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0203 	and.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d10d      	bne.n	800375a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
       ||
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003746:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
       ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d044      	beq.n	80037e4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
 800375e:	e041      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d00c      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x6e>
 8003768:	2b03      	cmp	r3, #3
 800376a:	d013      	beq.n	8003794 <RCCEx_PLLSAI1_Config+0x80>
 800376c:	2b01      	cmp	r3, #1
 800376e:	d120      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003770:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11d      	bne.n	80037b8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e01a      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003782:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d116      	bne.n	80037bc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003792:	e013      	b.n	80037bc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003794:	4b56      	ldr	r3, [pc, #344]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10f      	bne.n	80037c0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037b0:	e006      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      break;
 80037b6:	e004      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037b8:	bf00      	nop
 80037ba:	e002      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10d      	bne.n	80037e4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037c8:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	3b01      	subs	r3, #1
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	430b      	orrs	r3, r1
 80037de:	4944      	ldr	r1, [pc, #272]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d17d      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037ea:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a40      	ldr	r2, [pc, #256]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f6:	f7fd f957 	bl	8000aa8 <HAL_GetTick>
 80037fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037fc:	e009      	b.n	8003812 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037fe:	f7fd f953 	bl	8000aa8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d902      	bls.n	8003812 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	73fb      	strb	r3, [r7, #15]
        break;
 8003810:	e005      	b.n	800381e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003812:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ef      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d160      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d111      	bne.n	800384e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800382a:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6892      	ldr	r2, [r2, #8]
 800383a:	0211      	lsls	r1, r2, #8
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68d2      	ldr	r2, [r2, #12]
 8003840:	0912      	lsrs	r2, r2, #4
 8003842:	0452      	lsls	r2, r2, #17
 8003844:	430a      	orrs	r2, r1
 8003846:	492a      	ldr	r1, [pc, #168]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	610b      	str	r3, [r1, #16]
 800384c:	e027      	b.n	800389e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d112      	bne.n	800387a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003854:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800385c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6892      	ldr	r2, [r2, #8]
 8003864:	0211      	lsls	r1, r2, #8
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6912      	ldr	r2, [r2, #16]
 800386a:	0852      	lsrs	r2, r2, #1
 800386c:	3a01      	subs	r2, #1
 800386e:	0552      	lsls	r2, r2, #21
 8003870:	430a      	orrs	r2, r1
 8003872:	491f      	ldr	r1, [pc, #124]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	610b      	str	r3, [r1, #16]
 8003878:	e011      	b.n	800389e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800387a:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003882:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	0211      	lsls	r1, r2, #8
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6952      	ldr	r2, [r2, #20]
 8003890:	0852      	lsrs	r2, r2, #1
 8003892:	3a01      	subs	r2, #1
 8003894:	0652      	lsls	r2, r2, #25
 8003896:	430a      	orrs	r2, r1
 8003898:	4915      	ldr	r1, [pc, #84]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fd f8fd 	bl	8000aa8 <HAL_GetTick>
 80038ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b0:	e009      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b2:	f7fd f8f9 	bl	8000aa8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d902      	bls.n	80038c6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	73fb      	strb	r3, [r7, #15]
          break;
 80038c4:	e005      	b.n	80038d2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ef      	beq.n	80038b2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	4903      	ldr	r1, [pc, #12]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000

080038f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003902:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800390e:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0203 	and.w	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d10d      	bne.n	800393a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
       ||
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003926:	4b5f      	ldr	r3, [pc, #380]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
       ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d044      	beq.n	80039c4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
 800393e:	e041      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d00c      	beq.n	8003962 <RCCEx_PLLSAI2_Config+0x6e>
 8003948:	2b03      	cmp	r3, #3
 800394a:	d013      	beq.n	8003974 <RCCEx_PLLSAI2_Config+0x80>
 800394c:	2b01      	cmp	r3, #1
 800394e:	d120      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003950:	4b54      	ldr	r3, [pc, #336]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11d      	bne.n	8003998 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003960:	e01a      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003962:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003972:	e013      	b.n	800399c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003974:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10f      	bne.n	80039a0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003980:	4b48      	ldr	r3, [pc, #288]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003990:	e006      	b.n	80039a0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      break;
 8003996:	e004      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003998:	bf00      	nop
 800399a:	e002      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800399c:	bf00      	nop
 800399e:	e000      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80039a0:	bf00      	nop
    }

    if(status == HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10d      	bne.n	80039c4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039a8:	4b3e      	ldr	r3, [pc, #248]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	430b      	orrs	r3, r1
 80039be:	4939      	ldr	r1, [pc, #228]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d167      	bne.n	8003a9a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039ca:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a35      	ldr	r2, [pc, #212]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d6:	f7fd f867 	bl	8000aa8 <HAL_GetTick>
 80039da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039dc:	e009      	b.n	80039f2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039de:	f7fd f863 	bl	8000aa8 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d902      	bls.n	80039f2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	73fb      	strb	r3, [r7, #15]
        break;
 80039f0:	e005      	b.n	80039fe <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ef      	bne.n	80039de <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d14a      	bne.n	8003a9a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d111      	bne.n	8003a2e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a0a:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	0211      	lsls	r1, r2, #8
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68d2      	ldr	r2, [r2, #12]
 8003a20:	0912      	lsrs	r2, r2, #4
 8003a22:	0452      	lsls	r2, r2, #17
 8003a24:	430a      	orrs	r2, r1
 8003a26:	491f      	ldr	r1, [pc, #124]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	614b      	str	r3, [r1, #20]
 8003a2c:	e011      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6892      	ldr	r2, [r2, #8]
 8003a3e:	0211      	lsls	r1, r2, #8
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6912      	ldr	r2, [r2, #16]
 8003a44:	0852      	lsrs	r2, r2, #1
 8003a46:	3a01      	subs	r2, #1
 8003a48:	0652      	lsls	r2, r2, #25
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	4915      	ldr	r1, [pc, #84]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fd f823 	bl	8000aa8 <HAL_GetTick>
 8003a62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a64:	e009      	b.n	8003a7a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a66:	f7fd f81f 	bl	8000aa8 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d902      	bls.n	8003a7a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	73fb      	strb	r3, [r7, #15]
          break;
 8003a78:	e005      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ef      	beq.n	8003a66 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	4903      	ldr	r1, [pc, #12]	; (8003aa4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e040      	b.n	8003b3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fc fe2a 	bl	8000724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2224      	movs	r2, #36	; 0x24
 8003ad4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f82c 	bl	8003b44 <UART_SetConfig>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e022      	b.n	8003b3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 faaa 	bl	8004058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fb31 	bl	800419c <UART_CheckIdleState>
 8003b3a:	4603      	mov	r3, r0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003b48:	b088      	sub	sp, #32
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4bac      	ldr	r3, [pc, #688]	; (8003e24 <UART_SetConfig+0x2e0>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	69f9      	ldr	r1, [r7, #28]
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4aa2      	ldr	r2, [pc, #648]	; (8003e28 <UART_SetConfig+0x2e4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a99      	ldr	r2, [pc, #612]	; (8003e2c <UART_SetConfig+0x2e8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d121      	bne.n	8003c10 <UART_SetConfig+0xcc>
 8003bcc:	4b98      	ldr	r3, [pc, #608]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d816      	bhi.n	8003c08 <UART_SetConfig+0xc4>
 8003bda:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <UART_SetConfig+0x9c>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003bf1 	.word	0x08003bf1
 8003be4:	08003bfd 	.word	0x08003bfd
 8003be8:	08003bf7 	.word	0x08003bf7
 8003bec:	08003c03 	.word	0x08003c03
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	76fb      	strb	r3, [r7, #27]
 8003bf4:	e0e8      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	76fb      	strb	r3, [r7, #27]
 8003bfa:	e0e5      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	76fb      	strb	r3, [r7, #27]
 8003c00:	e0e2      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003c02:	2308      	movs	r3, #8
 8003c04:	76fb      	strb	r3, [r7, #27]
 8003c06:	e0df      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	76fb      	strb	r3, [r7, #27]
 8003c0c:	bf00      	nop
 8003c0e:	e0db      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a87      	ldr	r2, [pc, #540]	; (8003e34 <UART_SetConfig+0x2f0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d134      	bne.n	8003c84 <UART_SetConfig+0x140>
 8003c1a:	4b85      	ldr	r3, [pc, #532]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	d829      	bhi.n	8003c7c <UART_SetConfig+0x138>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <UART_SetConfig+0xec>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c65 	.word	0x08003c65
 8003c34:	08003c7d 	.word	0x08003c7d
 8003c38:	08003c7d 	.word	0x08003c7d
 8003c3c:	08003c7d 	.word	0x08003c7d
 8003c40:	08003c71 	.word	0x08003c71
 8003c44:	08003c7d 	.word	0x08003c7d
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003c7d 	.word	0x08003c7d
 8003c50:	08003c6b 	.word	0x08003c6b
 8003c54:	08003c7d 	.word	0x08003c7d
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c7d 	.word	0x08003c7d
 8003c60:	08003c77 	.word	0x08003c77
 8003c64:	2300      	movs	r3, #0
 8003c66:	76fb      	strb	r3, [r7, #27]
 8003c68:	e0ae      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	76fb      	strb	r3, [r7, #27]
 8003c6e:	e0ab      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003c70:	2304      	movs	r3, #4
 8003c72:	76fb      	strb	r3, [r7, #27]
 8003c74:	e0a8      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003c76:	2308      	movs	r3, #8
 8003c78:	76fb      	strb	r3, [r7, #27]
 8003c7a:	e0a5      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	76fb      	strb	r3, [r7, #27]
 8003c80:	bf00      	nop
 8003c82:	e0a1      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a6b      	ldr	r2, [pc, #428]	; (8003e38 <UART_SetConfig+0x2f4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d120      	bne.n	8003cd0 <UART_SetConfig+0x18c>
 8003c8e:	4b68      	ldr	r3, [pc, #416]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d00f      	beq.n	8003cbc <UART_SetConfig+0x178>
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d802      	bhi.n	8003ca6 <UART_SetConfig+0x162>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <UART_SetConfig+0x16c>
 8003ca4:	e010      	b.n	8003cc8 <UART_SetConfig+0x184>
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d005      	beq.n	8003cb6 <UART_SetConfig+0x172>
 8003caa:	2b30      	cmp	r3, #48	; 0x30
 8003cac:	d009      	beq.n	8003cc2 <UART_SetConfig+0x17e>
 8003cae:	e00b      	b.n	8003cc8 <UART_SetConfig+0x184>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	76fb      	strb	r3, [r7, #27]
 8003cb4:	e088      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	76fb      	strb	r3, [r7, #27]
 8003cba:	e085      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	76fb      	strb	r3, [r7, #27]
 8003cc0:	e082      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	76fb      	strb	r3, [r7, #27]
 8003cc6:	e07f      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	76fb      	strb	r3, [r7, #27]
 8003ccc:	bf00      	nop
 8003cce:	e07b      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a59      	ldr	r2, [pc, #356]	; (8003e3c <UART_SetConfig+0x2f8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d120      	bne.n	8003d1c <UART_SetConfig+0x1d8>
 8003cda:	4b55      	ldr	r3, [pc, #340]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d00f      	beq.n	8003d08 <UART_SetConfig+0x1c4>
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d802      	bhi.n	8003cf2 <UART_SetConfig+0x1ae>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <UART_SetConfig+0x1b8>
 8003cf0:	e010      	b.n	8003d14 <UART_SetConfig+0x1d0>
 8003cf2:	2b80      	cmp	r3, #128	; 0x80
 8003cf4:	d005      	beq.n	8003d02 <UART_SetConfig+0x1be>
 8003cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cf8:	d009      	beq.n	8003d0e <UART_SetConfig+0x1ca>
 8003cfa:	e00b      	b.n	8003d14 <UART_SetConfig+0x1d0>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	76fb      	strb	r3, [r7, #27]
 8003d00:	e062      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d02:	2302      	movs	r3, #2
 8003d04:	76fb      	strb	r3, [r7, #27]
 8003d06:	e05f      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	76fb      	strb	r3, [r7, #27]
 8003d0c:	e05c      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	76fb      	strb	r3, [r7, #27]
 8003d12:	e059      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d14:	2310      	movs	r3, #16
 8003d16:	76fb      	strb	r3, [r7, #27]
 8003d18:	bf00      	nop
 8003d1a:	e055      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a47      	ldr	r2, [pc, #284]	; (8003e40 <UART_SetConfig+0x2fc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d124      	bne.n	8003d70 <UART_SetConfig+0x22c>
 8003d26:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d34:	d012      	beq.n	8003d5c <UART_SetConfig+0x218>
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3a:	d802      	bhi.n	8003d42 <UART_SetConfig+0x1fe>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <UART_SetConfig+0x20c>
 8003d40:	e012      	b.n	8003d68 <UART_SetConfig+0x224>
 8003d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d46:	d006      	beq.n	8003d56 <UART_SetConfig+0x212>
 8003d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4c:	d009      	beq.n	8003d62 <UART_SetConfig+0x21e>
 8003d4e:	e00b      	b.n	8003d68 <UART_SetConfig+0x224>
 8003d50:	2300      	movs	r3, #0
 8003d52:	76fb      	strb	r3, [r7, #27]
 8003d54:	e038      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d56:	2302      	movs	r3, #2
 8003d58:	76fb      	strb	r3, [r7, #27]
 8003d5a:	e035      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	76fb      	strb	r3, [r7, #27]
 8003d60:	e032      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d62:	2308      	movs	r3, #8
 8003d64:	76fb      	strb	r3, [r7, #27]
 8003d66:	e02f      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	76fb      	strb	r3, [r7, #27]
 8003d6c:	bf00      	nop
 8003d6e:	e02b      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <UART_SetConfig+0x2e4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d124      	bne.n	8003dc4 <UART_SetConfig+0x280>
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d88:	d012      	beq.n	8003db0 <UART_SetConfig+0x26c>
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8e:	d802      	bhi.n	8003d96 <UART_SetConfig+0x252>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <UART_SetConfig+0x260>
 8003d94:	e012      	b.n	8003dbc <UART_SetConfig+0x278>
 8003d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9a:	d006      	beq.n	8003daa <UART_SetConfig+0x266>
 8003d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da0:	d009      	beq.n	8003db6 <UART_SetConfig+0x272>
 8003da2:	e00b      	b.n	8003dbc <UART_SetConfig+0x278>
 8003da4:	2300      	movs	r3, #0
 8003da6:	76fb      	strb	r3, [r7, #27]
 8003da8:	e00e      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003daa:	2302      	movs	r3, #2
 8003dac:	76fb      	strb	r3, [r7, #27]
 8003dae:	e00b      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003db0:	2304      	movs	r3, #4
 8003db2:	76fb      	strb	r3, [r7, #27]
 8003db4:	e008      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003db6:	2308      	movs	r3, #8
 8003db8:	76fb      	strb	r3, [r7, #27]
 8003dba:	e005      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	76fb      	strb	r3, [r7, #27]
 8003dc0:	bf00      	nop
 8003dc2:	e001      	b.n	8003dc8 <UART_SetConfig+0x284>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <UART_SetConfig+0x2e4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	f040 8087 	bne.w	8003ee2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dd4:	7efb      	ldrb	r3, [r7, #27]
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d836      	bhi.n	8003e48 <UART_SetConfig+0x304>
 8003dda:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x29c>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e49 	.word	0x08003e49
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e49 	.word	0x08003e49
 8003df0:	08003e13 	.word	0x08003e13
 8003df4:	08003e49 	.word	0x08003e49
 8003df8:	08003e49 	.word	0x08003e49
 8003dfc:	08003e49 	.word	0x08003e49
 8003e00:	08003e1b 	.word	0x08003e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7ff f904 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8003e08:	6178      	str	r0, [r7, #20]
        break;
 8003e0a:	e022      	b.n	8003e52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <UART_SetConfig+0x300>)
 8003e0e:	617b      	str	r3, [r7, #20]
        break;
 8003e10:	e01f      	b.n	8003e52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e12:	f7ff f867 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8003e16:	6178      	str	r0, [r7, #20]
        break;
 8003e18:	e01b      	b.n	8003e52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1e:	617b      	str	r3, [r7, #20]
        break;
 8003e20:	e017      	b.n	8003e52 <UART_SetConfig+0x30e>
 8003e22:	bf00      	nop
 8003e24:	efff69f3 	.word	0xefff69f3
 8003e28:	40008000 	.word	0x40008000
 8003e2c:	40013800 	.word	0x40013800
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40004400 	.word	0x40004400
 8003e38:	40004800 	.word	0x40004800
 8003e3c:	40004c00 	.word	0x40004c00
 8003e40:	40005000 	.word	0x40005000
 8003e44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	76bb      	strb	r3, [r7, #26]
        break;
 8003e50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80f1 	beq.w	800403c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	4413      	add	r3, r2
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d305      	bcc.n	8003e76 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d902      	bls.n	8003e7c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	76bb      	strb	r3, [r7, #26]
 8003e7a:	e0df      	b.n	800403c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	f04f 0400 	mov.w	r4, #0
 8003e8c:	0214      	lsls	r4, r2, #8
 8003e8e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003e92:	020b      	lsls	r3, r1, #8
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6852      	ldr	r2, [r2, #4]
 8003e98:	0852      	lsrs	r2, r2, #1
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	eb13 0b01 	adds.w	fp, r3, r1
 8003ea4:	eb44 0c02 	adc.w	ip, r4, r2
 8003ea8:	4658      	mov	r0, fp
 8003eaa:	4661      	mov	r1, ip
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f04f 0400 	mov.w	r4, #0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	f7fc f986 	bl	80001c8 <__aeabi_uldivmod>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec8:	d308      	bcc.n	8003edc <UART_SetConfig+0x398>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed0:	d204      	bcs.n	8003edc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	e0af      	b.n	800403c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	76bb      	strb	r3, [r7, #26]
 8003ee0:	e0ac      	b.n	800403c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eea:	d15a      	bne.n	8003fa2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003eec:	7efb      	ldrb	r3, [r7, #27]
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d827      	bhi.n	8003f42 <UART_SetConfig+0x3fe>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x3b4>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f25 	.word	0x08003f25
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	08003f43 	.word	0x08003f43
 8003f08:	08003f33 	.word	0x08003f33
 8003f0c:	08003f43 	.word	0x08003f43
 8003f10:	08003f43 	.word	0x08003f43
 8003f14:	08003f43 	.word	0x08003f43
 8003f18:	08003f3b 	.word	0x08003f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7ff f878 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8003f20:	6178      	str	r0, [r7, #20]
        break;
 8003f22:	e013      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f24:	f7ff f88a 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 8003f28:	6178      	str	r0, [r7, #20]
        break;
 8003f2a:	e00f      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f2c:	4b49      	ldr	r3, [pc, #292]	; (8004054 <UART_SetConfig+0x510>)
 8003f2e:	617b      	str	r3, [r7, #20]
        break;
 8003f30:	e00c      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f32:	f7fe ffd7 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8003f36:	6178      	str	r0, [r7, #20]
        break;
 8003f38:	e008      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3e:	617b      	str	r3, [r7, #20]
        break;
 8003f40:	e004      	b.n	8003f4c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	76bb      	strb	r3, [r7, #26]
        break;
 8003f4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d074      	beq.n	800403c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	005a      	lsls	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	441a      	add	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d916      	bls.n	8003f9c <UART_SetConfig+0x458>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f74:	d212      	bcs.n	8003f9c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f023 030f 	bic.w	r3, r3, #15
 8003f7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	89fb      	ldrh	r3, [r7, #14]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	89fa      	ldrh	r2, [r7, #14]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	e04f      	b.n	800403c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	76bb      	strb	r3, [r7, #26]
 8003fa0:	e04c      	b.n	800403c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa2:	7efb      	ldrb	r3, [r7, #27]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d828      	bhi.n	8003ffa <UART_SetConfig+0x4b6>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <UART_SetConfig+0x46c>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08003ffb 	.word	0x08003ffb
 8003fc0:	08003feb 	.word	0x08003feb
 8003fc4:	08003ffb 	.word	0x08003ffb
 8003fc8:	08003ffb 	.word	0x08003ffb
 8003fcc:	08003ffb 	.word	0x08003ffb
 8003fd0:	08003ff3 	.word	0x08003ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f7ff f81c 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	6178      	str	r0, [r7, #20]
        break;
 8003fda:	e013      	b.n	8004004 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7ff f82e 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 8003fe0:	6178      	str	r0, [r7, #20]
        break;
 8003fe2:	e00f      	b.n	8004004 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <UART_SetConfig+0x510>)
 8003fe6:	617b      	str	r3, [r7, #20]
        break;
 8003fe8:	e00c      	b.n	8004004 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7fe ff7b 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8003fee:	6178      	str	r0, [r7, #20]
        break;
 8003ff0:	e008      	b.n	8004004 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff6:	617b      	str	r3, [r7, #20]
        break;
 8003ff8:	e004      	b.n	8004004 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	76bb      	strb	r3, [r7, #26]
        break;
 8004002:	bf00      	nop
    }

    if (pclk != 0U)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085a      	lsrs	r2, r3, #1
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b0f      	cmp	r3, #15
 8004022:	d909      	bls.n	8004038 <UART_SetConfig+0x4f4>
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402a:	d205      	bcs.n	8004038 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	e001      	b.n	800403c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004048:	7ebb      	ldrb	r3, [r7, #26]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004054:	00f42400 	.word	0x00f42400

08004058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01a      	beq.n	800416e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004156:	d10a      	bne.n	800416e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041ac:	f7fc fc7c 	bl	8000aa8 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d10e      	bne.n	80041de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f82d 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e023      	b.n	8004226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d10e      	bne.n	800420a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f817 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e00d      	b.n	8004226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b09c      	sub	sp, #112	; 0x70
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423e:	e0a5      	b.n	800438c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004246:	f000 80a1 	beq.w	800438c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fc fc2d 	bl	8000aa8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <UART_WaitOnFlagUntilTimeout+0x32>
 800425a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800425c:	2b00      	cmp	r3, #0
 800425e:	d13e      	bne.n	80042de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800426e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004274:	667b      	str	r3, [r7, #100]	; 0x64
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800427e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004280:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800428c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e6      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	663b      	str	r3, [r7, #96]	; 0x60
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3308      	adds	r3, #8
 80042b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e067      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d04f      	beq.n	800438c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fa:	d147      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004304:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800431a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
 8004326:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800432a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e6      	bne.n	8004306 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	613b      	str	r3, [r7, #16]
   return(result);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004358:	623a      	str	r2, [r7, #32]
 800435a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	69f9      	ldr	r1, [r7, #28]
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	61bb      	str	r3, [r7, #24]
   return(result);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e010      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4013      	ands	r3, r2
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	429a      	cmp	r2, r3
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	f43f af4a 	beq.w	8004240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3770      	adds	r7, #112	; 0x70
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043b6:	b084      	sub	sp, #16
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	f107 001c 	add.w	r0, r7, #28
 80043c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f001 faf7 	bl	80059c8 <USB_CoreReset>
 80043da:	4603      	mov	r3, r0
 80043dc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80043de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
 80043f0:	e005      	b.n	80043fe <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800440a:	b004      	add	sp, #16
 800440c:	4770      	bx	lr
	...

08004410 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d165      	bne.n	80044f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4a3e      	ldr	r2, [pc, #248]	; (8004520 <USB_SetTurnaroundTime+0x110>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d906      	bls.n	800443a <USB_SetTurnaroundTime+0x2a>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4a3d      	ldr	r2, [pc, #244]	; (8004524 <USB_SetTurnaroundTime+0x114>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d802      	bhi.n	800443a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004434:	230f      	movs	r3, #15
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e05c      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4a39      	ldr	r2, [pc, #228]	; (8004524 <USB_SetTurnaroundTime+0x114>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d906      	bls.n	8004450 <USB_SetTurnaroundTime+0x40>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4a38      	ldr	r2, [pc, #224]	; (8004528 <USB_SetTurnaroundTime+0x118>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d802      	bhi.n	8004450 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800444a:	230e      	movs	r3, #14
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e051      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a35      	ldr	r2, [pc, #212]	; (8004528 <USB_SetTurnaroundTime+0x118>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d906      	bls.n	8004466 <USB_SetTurnaroundTime+0x56>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4a34      	ldr	r2, [pc, #208]	; (800452c <USB_SetTurnaroundTime+0x11c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d802      	bhi.n	8004466 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004460:	230d      	movs	r3, #13
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e046      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a30      	ldr	r2, [pc, #192]	; (800452c <USB_SetTurnaroundTime+0x11c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d906      	bls.n	800447c <USB_SetTurnaroundTime+0x6c>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4a2f      	ldr	r2, [pc, #188]	; (8004530 <USB_SetTurnaroundTime+0x120>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d802      	bhi.n	800447c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004476:	230c      	movs	r3, #12
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e03b      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <USB_SetTurnaroundTime+0x120>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d906      	bls.n	8004492 <USB_SetTurnaroundTime+0x82>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <USB_SetTurnaroundTime+0x124>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d802      	bhi.n	8004492 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800448c:	230b      	movs	r3, #11
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e030      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4a27      	ldr	r2, [pc, #156]	; (8004534 <USB_SetTurnaroundTime+0x124>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d906      	bls.n	80044a8 <USB_SetTurnaroundTime+0x98>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4a26      	ldr	r2, [pc, #152]	; (8004538 <USB_SetTurnaroundTime+0x128>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d802      	bhi.n	80044a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044a2:	230a      	movs	r3, #10
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e025      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4a23      	ldr	r2, [pc, #140]	; (8004538 <USB_SetTurnaroundTime+0x128>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d906      	bls.n	80044be <USB_SetTurnaroundTime+0xae>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4a22      	ldr	r2, [pc, #136]	; (800453c <USB_SetTurnaroundTime+0x12c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d802      	bhi.n	80044be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044b8:	2309      	movs	r3, #9
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e01a      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4a1e      	ldr	r2, [pc, #120]	; (800453c <USB_SetTurnaroundTime+0x12c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d906      	bls.n	80044d4 <USB_SetTurnaroundTime+0xc4>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <USB_SetTurnaroundTime+0x130>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d802      	bhi.n	80044d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ce:	2308      	movs	r3, #8
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e00f      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <USB_SetTurnaroundTime+0x130>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d906      	bls.n	80044ea <USB_SetTurnaroundTime+0xda>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4a19      	ldr	r2, [pc, #100]	; (8004544 <USB_SetTurnaroundTime+0x134>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d802      	bhi.n	80044ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044e4:	2307      	movs	r3, #7
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e004      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044ea:	2306      	movs	r3, #6
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e001      	b.n	80044f4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044f0:	2309      	movs	r3, #9
 80044f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	029b      	lsls	r3, r3, #10
 8004508:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800450c:	431a      	orrs	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	00d8acbf 	.word	0x00d8acbf
 8004524:	00e4e1bf 	.word	0x00e4e1bf
 8004528:	00f423ff 	.word	0x00f423ff
 800452c:	0106737f 	.word	0x0106737f
 8004530:	011a499f 	.word	0x011a499f
 8004534:	01312cff 	.word	0x01312cff
 8004538:	014ca43f 	.word	0x014ca43f
 800453c:	016e35ff 	.word	0x016e35ff
 8004540:	01a6ab1f 	.word	0x01a6ab1f
 8004544:	01e847ff 	.word	0x01e847ff

08004548 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f043 0201 	orr.w	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d115      	bne.n	80045da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045ba:	2001      	movs	r0, #1
 80045bc:	f7fc fa80 	bl	8000ac0 <HAL_Delay>
      ms++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f001 f985 	bl	80058d6 <USB_GetMode>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d01e      	beq.n	8004610 <USB_SetCurrentMode+0x84>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b31      	cmp	r3, #49	; 0x31
 80045d6:	d9f0      	bls.n	80045ba <USB_SetCurrentMode+0x2e>
 80045d8:	e01a      	b.n	8004610 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d115      	bne.n	800460c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7fc fa67 	bl	8000ac0 <HAL_Delay>
      ms++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3301      	adds	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f001 f96c 	bl	80058d6 <USB_GetMode>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <USB_SetCurrentMode+0x84>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b31      	cmp	r3, #49	; 0x31
 8004608:	d9f0      	bls.n	80045ec <USB_SetCurrentMode+0x60>
 800460a:	e001      	b.n	8004610 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e005      	b.n	800461c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b32      	cmp	r3, #50	; 0x32
 8004614:	d101      	bne.n	800461a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004624:	b084      	sub	sp, #16
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	e009      	b.n	8004658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3340      	adds	r3, #64	; 0x40
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	2200      	movs	r2, #0
 8004650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	3301      	adds	r3, #1
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b0e      	cmp	r3, #14
 800465c:	d9f2      	bls.n	8004644 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11c      	bne.n	800469e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e005      	b.n	80046aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046bc:	4619      	mov	r1, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c4:	461a      	mov	r2, r3
 80046c6:	680b      	ldr	r3, [r1, #0]
 80046c8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046ca:	2103      	movs	r1, #3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f959 	bl	8004984 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046d2:	2110      	movs	r1, #16
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f8f1 	bl	80048bc <USB_FlushTxFifo>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f91d 	bl	8004924 <USB_FlushRxFifo>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	461a      	mov	r2, r3
 80046fc:	2300      	movs	r3, #0
 80046fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	461a      	mov	r2, r3
 8004714:	2300      	movs	r3, #0
 8004716:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	e043      	b.n	80047a6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004734:	d118      	bne.n	8004768 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	461a      	mov	r2, r3
 800474a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	e013      	b.n	800477a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	461a      	mov	r2, r3
 8004760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e008      	b.n	800477a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	461a      	mov	r2, r3
 8004776:	2300      	movs	r3, #0
 8004778:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004786:	461a      	mov	r2, r3
 8004788:	2300      	movs	r3, #0
 800478a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	461a      	mov	r2, r3
 800479a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800479e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	3301      	adds	r3, #1
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d3b7      	bcc.n	800471e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e043      	b.n	800483c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ca:	d118      	bne.n	80047fe <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047de:	461a      	mov	r2, r3
 80047e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e013      	b.n	8004810 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f4:	461a      	mov	r2, r3
 80047f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e008      	b.n	8004810 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	461a      	mov	r2, r3
 800480c:	2300      	movs	r3, #0
 800480e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	461a      	mov	r2, r3
 800481e:	2300      	movs	r3, #0
 8004820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	461a      	mov	r2, r3
 8004830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004834:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3301      	adds	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d3b7      	bcc.n	80047b4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004856:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004864:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f043 0210 	orr.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <USB_DevInit+0x294>)
 8004878:	4313      	orrs	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800487e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f043 0208 	orr.w	r2, r3, #8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800489e:	f043 0304 	orr.w	r3, r3, #4
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048b2:	b004      	add	sp, #16
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	803c3800 	.word	0x803c3800

080048bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <USB_FlushTxFifo+0x64>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e01b      	b.n	8004914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	daf2      	bge.n	80048ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	019b      	lsls	r3, r3, #6
 80048ec:	f043 0220 	orr.w	r2, r3, #32
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3301      	adds	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a08      	ldr	r2, [pc, #32]	; (8004920 <USB_FlushTxFifo+0x64>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e006      	b.n	8004914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d0f0      	beq.n	80048f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	00030d40 	.word	0x00030d40

08004924 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a11      	ldr	r2, [pc, #68]	; (8004980 <USB_FlushRxFifo+0x5c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e018      	b.n	8004974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	daf2      	bge.n	8004930 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2210      	movs	r2, #16
 8004952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a08      	ldr	r2, [pc, #32]	; (8004980 <USB_FlushRxFifo+0x5c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e006      	b.n	8004974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d0f0      	beq.n	8004954 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	00030d40 	.word	0x00030d40

08004984 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a4:	4313      	orrs	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b087      	sub	sp, #28
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0306 	and.w	r3, r3, #6
 80049ce:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d002      	beq.n	80049dc <USB_GetDevSpeed+0x26>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d102      	bne.n	80049e2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049dc:	2302      	movs	r3, #2
 80049de:	75fb      	strb	r3, [r7, #23]
 80049e0:	e001      	b.n	80049e6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80049e2:	230f      	movs	r3, #15
 80049e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d13a      	bne.n	8004a86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	2101      	movs	r1, #1
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d155      	bne.n	8004af4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	791b      	ldrb	r3, [r3, #4]
 8004a62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	059b      	lsls	r3, r3, #22
 8004a6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	0151      	lsls	r1, r2, #5
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	440a      	add	r2, r1
 8004a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e036      	b.n	8004af4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	2101      	movs	r1, #1
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	68f9      	ldr	r1, [r7, #12]
 8004aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11a      	bne.n	8004af4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	791b      	ldrb	r3, [r3, #4]
 8004ad8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ada:	430b      	orrs	r3, r1
 8004adc:	4313      	orrs	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d161      	bne.n	8004be4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b36:	d11f      	bne.n	8004b78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	68f9      	ldr	r1, [r7, #12]
 8004b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b98:	4013      	ands	r3, r2
 8004b9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	0159      	lsls	r1, r3, #5
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	440b      	add	r3, r1
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <USB_DeactivateEndpoint+0x1b0>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]
 8004be2:	e060      	b.n	8004ca6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfa:	d11f      	bne.n	8004c3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	43db      	mvns	r3, r3
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	2101      	movs	r1, #1
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c80:	4013      	ands	r3, r2
 8004c82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	0159      	lsls	r1, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	440b      	add	r3, r1
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <USB_DeactivateEndpoint+0x1b4>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	ec337800 	.word	0xec337800
 8004cb8:	eff37800 	.word	0xeff37800

08004cbc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	785b      	ldrb	r3, [r3, #1]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	f040 810a 	bne.w	8004eee <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d132      	bne.n	8004d48 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d40:	0cdb      	lsrs	r3, r3, #19
 8004d42:	04db      	lsls	r3, r3, #19
 8004d44:	6113      	str	r3, [r2, #16]
 8004d46:	e074      	b.n	8004e32 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d62:	0cdb      	lsrs	r3, r3, #19
 8004d64:	04db      	lsls	r3, r3, #19
 8004d66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6999      	ldr	r1, [r3, #24]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	440b      	add	r3, r1
 8004da4:	1e59      	subs	r1, r3, #1
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004db0:	4bb1      	ldr	r3, [pc, #708]	; (8005078 <USB_EPStartXfer+0x3bc>)
 8004db2:	400b      	ands	r3, r1
 8004db4:	6939      	ldr	r1, [r7, #16]
 8004db6:	0148      	lsls	r0, r1, #5
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	4401      	add	r1, r0
 8004dbc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dda:	6939      	ldr	r1, [r7, #16]
 8004ddc:	0148      	lsls	r0, r1, #5
 8004dde:	6979      	ldr	r1, [r7, #20]
 8004de0:	4401      	add	r1, r0
 8004de2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004de6:	4313      	orrs	r3, r2
 8004de8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	791b      	ldrb	r3, [r3, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d11f      	bne.n	8004e32 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e30:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e50:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d015      	beq.n	8004e86 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8104 	beq.w	800506c <USB_EPStartXfer+0x3b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	2101      	movs	r1, #1
 8004e76:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7a:	6979      	ldr	r1, [r7, #20]
 8004e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e80:	4313      	orrs	r3, r2
 8004e82:	634b      	str	r3, [r1, #52]	; 0x34
 8004e84:	e0f2      	b.n	800506c <USB_EPStartXfer+0x3b0>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d110      	bne.n	8004eb8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e00f      	b.n	8004ed8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	6919      	ldr	r1, [r3, #16]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781a      	ldrb	r2, [r3, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa94 	bl	8005414 <USB_WritePacket>
 8004eec:	e0be      	b.n	800506c <USB_EPStartXfer+0x3b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f08:	0cdb      	lsrs	r3, r3, #19
 8004f0a:	04db      	lsls	r3, r3, #19
 8004f0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d123      	bne.n	8004f82 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f50:	6939      	ldr	r1, [r7, #16]
 8004f52:	0148      	lsls	r0, r1, #5
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	4401      	add	r1, r0
 8004f58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f7e:	6113      	str	r3, [r2, #16]
 8004f80:	e037      	b.n	8004ff2 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	89fa      	ldrh	r2, [r7, #14]
 8004f9e:	fb02 f203 	mul.w	r2, r2, r3
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	04d9      	lsls	r1, r3, #19
 8004fb8:	4b2f      	ldr	r3, [pc, #188]	; (8005078 <USB_EPStartXfer+0x3bc>)
 8004fba:	400b      	ands	r3, r1
 8004fbc:	6939      	ldr	r1, [r7, #16]
 8004fbe:	0148      	lsls	r0, r1, #5
 8004fc0:	6979      	ldr	r1, [r7, #20]
 8004fc2:	4401      	add	r1, r0
 8004fc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe2:	6939      	ldr	r1, [r7, #16]
 8004fe4:	0148      	lsls	r0, r1, #5
 8004fe6:	6979      	ldr	r1, [r7, #20]
 8004fe8:	4401      	add	r1, r0
 8004fea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	791b      	ldrb	r3, [r3, #4]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d128      	bne.n	800504c <USB_EPStartXfer+0x390>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d110      	bne.n	800502c <USB_EPStartXfer+0x370>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e00f      	b.n	800504c <USB_EPStartXfer+0x390>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005066:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800506a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	1ff80000 	.word	0x1ff80000

0800507c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	785b      	ldrb	r3, [r3, #1]
 8005094:	2b01      	cmp	r3, #1
 8005096:	f040 80ab 	bne.w	80051f0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d132      	bne.n	8005108 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005100:	0cdb      	lsrs	r3, r3, #19
 8005102:	04db      	lsls	r3, r3, #19
 8005104:	6113      	str	r3, [r2, #16]
 8005106:	e04e      	b.n	80051a6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005122:	0cdb      	lsrs	r3, r3, #19
 8005124:	04db      	lsls	r3, r3, #19
 8005126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005142:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005146:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800514a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	699a      	ldr	r2, [r3, #24]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	429a      	cmp	r2, r3
 8005156:	d903      	bls.n	8005160 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	0151      	lsls	r1, r2, #5
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	440a      	add	r2, r1
 8005176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800517e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	0148      	lsls	r0, r1, #5
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	4401      	add	r1, r0
 800519e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051a2:	4313      	orrs	r3, r2
 80051a4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051c4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d071      	beq.n	80052b2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	2101      	movs	r1, #1
 80051e0:	fa01 f303 	lsl.w	r3, r1, r3
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ea:	4313      	orrs	r3, r2
 80051ec:	634b      	str	r3, [r1, #52]	; 0x34
 80051ee:	e060      	b.n	80052b2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520a:	0cdb      	lsrs	r3, r3, #19
 800520c:	04db      	lsls	r3, r3, #19
 800520e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800522e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005232:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800526a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	0148      	lsls	r0, r1, #5
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	4401      	add	r1, r0
 800528a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800528e:	4313      	orrs	r3, r2
 8005290:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d14a      	bne.n	8005374 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052f6:	f040 8086 	bne.w	8005406 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005318:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800531c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	7812      	ldrb	r2, [r2, #0]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005340:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3301      	adds	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f242 7210 	movw	r2, #10000	; 0x2710
 800534e:	4293      	cmp	r3, r2
 8005350:	d902      	bls.n	8005358 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	75fb      	strb	r3, [r7, #23]
          break;
 8005356:	e056      	b.n	8005406 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800536c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005370:	d0e7      	beq.n	8005342 <USB_EPStopXfer+0x82>
 8005372:	e048      	b.n	8005406 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800538c:	d13b      	bne.n	8005406 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	7812      	ldrb	r2, [r2, #0]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f242 7210 	movw	r2, #10000	; 0x2710
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d902      	bls.n	80053ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	75fb      	strb	r3, [r7, #23]
          break;
 80053ea:	e00c      	b.n	8005406 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005404:	d0e7      	beq.n	80053d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005406:	7dfb      	ldrb	r3, [r7, #23]
}
 8005408:	4618      	mov	r0, r3
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	4611      	mov	r1, r2
 8005420:	461a      	mov	r2, r3
 8005422:	460b      	mov	r3, r1
 8005424:	71fb      	strb	r3, [r7, #7]
 8005426:	4613      	mov	r3, r2
 8005428:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005432:	88bb      	ldrh	r3, [r7, #4]
 8005434:	3303      	adds	r3, #3
 8005436:	089b      	lsrs	r3, r3, #2
 8005438:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e018      	b.n	8005472 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	031a      	lsls	r2, r3, #12
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	4413      	add	r3, r2
 8005448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544c:	461a      	mov	r2, r3
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	3301      	adds	r3, #1
 8005458:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3301      	adds	r3, #1
 800545e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	3301      	adds	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3301      	adds	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	3301      	adds	r3, #1
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	d3e2      	bcc.n	8005440 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3724      	adds	r7, #36	; 0x24
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005488:	b480      	push	{r7}
 800548a:	b08b      	sub	sp, #44	; 0x2c
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	623b      	str	r3, [r7, #32]
 80054b2:	e014      	b.n	80054de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	601a      	str	r2, [r3, #0]
    pDest++;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	3301      	adds	r3, #1
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	3301      	adds	r3, #1
 80054ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	3301      	adds	r3, #1
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	3301      	adds	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	3301      	adds	r3, #1
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	6a3a      	ldr	r2, [r7, #32]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d3e6      	bcc.n	80054b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054e6:	8bfb      	ldrh	r3, [r7, #30]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01e      	beq.n	800552a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f6:	461a      	mov	r2, r3
 80054f8:	f107 0310 	add.w	r3, r7, #16
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
 800550c:	b2da      	uxtb	r2, r3
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	701a      	strb	r2, [r3, #0]
      i++;
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	3301      	adds	r3, #1
 8005516:	623b      	str	r3, [r7, #32]
      pDest++;
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	3301      	adds	r3, #1
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800551e:	8bfb      	ldrh	r3, [r7, #30]
 8005520:	3b01      	subs	r3, #1
 8005522:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005524:	8bfb      	ldrh	r3, [r7, #30]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ea      	bne.n	8005500 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800552c:	4618      	mov	r0, r3
 800552e:	372c      	adds	r7, #44	; 0x2c
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	785b      	ldrb	r3, [r3, #1]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d12c      	bne.n	80055ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	db12      	blt.n	800558c <USB_EPSetStall+0x54>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00f      	beq.n	800558c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005586:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800558a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e02b      	b.n	8005606 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	db12      	blt.n	80055e6 <USB_EPSetStall+0xae>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00f      	beq.n	80055e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005604:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d128      	bne.n	8005682 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	440a      	add	r2, r1
 8005646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800564e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	791b      	ldrb	r3, [r3, #4]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d003      	beq.n	8005660 <USB_EPClearStall+0x4c>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	791b      	ldrb	r3, [r3, #4]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d138      	bne.n	80056d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	e027      	b.n	80056d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	791b      	ldrb	r3, [r3, #4]
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d003      	beq.n	80056b2 <USB_EPClearStall+0x9e>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	791b      	ldrb	r3, [r3, #4]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d10f      	bne.n	80056d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005702:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005714:	68f9      	ldr	r1, [r7, #12]
 8005716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575a:	f023 0302 	bic.w	r3, r3, #2
 800575e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005788:	f023 0303 	bic.w	r3, r3, #3
 800578c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800579c:	f043 0302 	orr.w	r3, r3, #2
 80057a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4013      	ands	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057c8:	68fb      	ldr	r3, [r7, #12]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	4013      	ands	r3, r2
 80057f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	0c1b      	lsrs	r3, r3, #16
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	4013      	ands	r3, r2
 800582c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	b29b      	uxth	r3, r3
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4013      	ands	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800586c:	68bb      	ldr	r3, [r7, #8]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	fa22 f303 	lsr.w	r3, r2, r3
 80058aa:	01db      	lsls	r3, r3, #7
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4013      	ands	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058c8:	68bb      	ldr	r3, [r7, #8]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0301 	and.w	r3, r3, #1
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005910:	f023 0307 	bic.w	r3, r3, #7
 8005914:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005928:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	333c      	adds	r3, #60	; 0x3c
 800594a:	3304      	adds	r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <USB_EP0_OutStart+0x8c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d90a      	bls.n	800596e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005968:	d101      	bne.n	800596e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	e024      	b.n	80059b8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	461a      	mov	r2, r3
 8005976:	2300      	movs	r3, #0
 8005978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800598c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599c:	f043 0318 	orr.w	r3, r3, #24
 80059a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059b4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	4f54300a 	.word	0x4f54300a

080059c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <USB_CoreReset+0x64>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e01b      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	daf2      	bge.n	80059d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <USB_CoreReset+0x64>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e006      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d0f0      	beq.n	80059fe <USB_CoreReset+0x36>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8005a3c:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 8005a40:	f002 fb52 	bl	80080e8 <USBD_static_malloc>
 8005a44:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d105      	bne.n	8005a58 <USBD_AUDIO_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a54:	2302      	movs	r3, #2
 8005a56:	e04b      	b.n	8005af0 <USBD_AUDIO_Init+0xc0>
  }

  pdev->pClassData = (void *)haudio;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	7c1b      	ldrb	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <USBD_AUDIO_Init+0x42>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8005a70:	e003      	b.n	8005a7a <USBD_AUDIO_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8005a7a:	2358      	movs	r3, #88	; 0x58
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	2101      	movs	r1, #1
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f002 f91d 	bl	8007cc0 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005ab2:	3306      	adds	r3, #6
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005abe:	3305      	adds	r3, #5
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2200      	movs	r2, #0
 8005ace:	2146      	movs	r1, #70	; 0x46
 8005ad0:	f245 6054 	movw	r0, #22100	; 0x5654
 8005ad4:	4798      	blx	r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <USBD_AUDIO_Init+0xb0>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e007      	b.n	8005af0 <USBD_AUDIO_Init+0xc0>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1d1a      	adds	r2, r3, #4
 8005ae4:	2358      	movs	r3, #88	; 0x58
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f002 fa63 	bl	8007fb4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8005b04:	2101      	movs	r1, #1
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f002 f918 	bl	8007d3c <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00f      	beq.n	8005b46 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2000      	movs	r0, #0
 8005b30:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f002 fae3 	bl	8008104 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b68:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <USBD_AUDIO_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e0b0      	b.n	8005cd6 <USBD_AUDIO_Setup+0x186>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01a      	beq.n	8005bb6 <USBD_AUDIO_Setup+0x66>
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	f040 80a0 	bne.w	8005cc6 <USBD_AUDIO_Setup+0x176>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d006      	beq.n	8005b9c <USBD_AUDIO_Setup+0x4c>
 8005b8e:	2b81      	cmp	r3, #129	; 0x81
 8005b90:	d109      	bne.n	8005ba6 <USBD_AUDIO_Setup+0x56>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f9ad 	bl	8005ef4 <AUDIO_REQ_GetCurrent>
          break;
 8005b9a:	e00b      	b.n	8005bb4 <USBD_AUDIO_Setup+0x64>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f9cc 	bl	8005f3c <AUDIO_REQ_SetCurrent>
          break;
 8005ba4:	e006      	b.n	8005bb4 <USBD_AUDIO_Setup+0x64>

        default:
          USBD_CtlError(pdev, req);
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 fbcc 	bl	8007346 <USBD_CtlError>
          ret = USBD_FAIL;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8005bb2:	bf00      	nop
      }
      break;
 8005bb4:	e08e      	b.n	8005cd4 <USBD_AUDIO_Setup+0x184>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	2b0b      	cmp	r3, #11
 8005bbc:	d878      	bhi.n	8005cb0 <USBD_AUDIO_Setup+0x160>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <USBD_AUDIO_Setup+0x74>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bf5 	.word	0x08005bf5
 8005bc8:	08005cbf 	.word	0x08005cbf
 8005bcc:	08005cb1 	.word	0x08005cb1
 8005bd0:	08005cb1 	.word	0x08005cb1
 8005bd4:	08005cb1 	.word	0x08005cb1
 8005bd8:	08005cb1 	.word	0x08005cb1
 8005bdc:	08005c1f 	.word	0x08005c1f
 8005be0:	08005cb1 	.word	0x08005cb1
 8005be4:	08005cb1 	.word	0x08005cb1
 8005be8:	08005cb1 	.word	0x08005cb1
 8005bec:	08005c49 	.word	0x08005c49
 8005bf0:	08005c71 	.word	0x08005c71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d107      	bne.n	8005c10 <USBD_AUDIO_Setup+0xc0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c00:	f107 0308 	add.w	r3, r7, #8
 8005c04:	2202      	movs	r2, #2
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fc0d 	bl	8007428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c0e:	e059      	b.n	8005cc4 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 fb97 	bl	8007346 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c1c:	e052      	b.n	8005cc4 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	885b      	ldrh	r3, [r3, #2]
 8005c22:	0a1b      	lsrs	r3, r3, #8
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b21      	cmp	r3, #33	; 0x21
 8005c28:	d14b      	bne.n	8005cc2 <USBD_AUDIO_Setup+0x172>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 8005c2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ce0 <USBD_AUDIO_Setup+0x190>)
 8005c2c:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	88db      	ldrh	r3, [r3, #6]
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	bf28      	it	cs
 8005c36:	2309      	movcs	r3, #9
 8005c38:	817b      	strh	r3, [r7, #10]

            (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c3a:	897b      	ldrh	r3, [r7, #10]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 fbf1 	bl	8007428 <USBD_CtlSendData>
          }
          break;
 8005c46:	e03c      	b.n	8005cc2 <USBD_AUDIO_Setup+0x172>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d106      	bne.n	8005c62 <USBD_AUDIO_Setup+0x112>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2201      	movs	r2, #1
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 fbe4 	bl	8007428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c60:	e030      	b.n	8005cc4 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fb6e 	bl	8007346 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c6e:	e029      	b.n	8005cc4 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d112      	bne.n	8005ca2 <USBD_AUDIO_Setup+0x152>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	885b      	ldrh	r3, [r3, #2]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d806      	bhi.n	8005c94 <USBD_AUDIO_Setup+0x144>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	885b      	ldrh	r3, [r3, #2]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c92:	e017      	b.n	8005cc4 <USBD_AUDIO_Setup+0x174>
              USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 fb55 	bl	8007346 <USBD_CtlError>
              ret = USBD_FAIL;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	75fb      	strb	r3, [r7, #23]
          break;
 8005ca0:	e010      	b.n	8005cc4 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fb4e 	bl	8007346 <USBD_CtlError>
            ret = USBD_FAIL;
 8005caa:	2303      	movs	r3, #3
 8005cac:	75fb      	strb	r3, [r7, #23]
          break;
 8005cae:	e009      	b.n	8005cc4 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 fb47 	bl	8007346 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	75fb      	strb	r3, [r7, #23]
          break;
 8005cbc:	e002      	b.n	8005cc4 <USBD_AUDIO_Setup+0x174>
          break;
 8005cbe:	bf00      	nop
 8005cc0:	e008      	b.n	8005cd4 <USBD_AUDIO_Setup+0x184>
          break;
 8005cc2:	bf00      	nop
      }
      break;
 8005cc4:	e006      	b.n	8005cd4 <USBD_AUDIO_Setup+0x184>
    default:
      USBD_CtlError(pdev, req);
 8005cc6:	6839      	ldr	r1, [r7, #0]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 fb3c 	bl	8007346 <USBD_CtlError>
      ret = USBD_FAIL;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd2:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	2000006e 	.word	0x2000006e

08005ce4 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	226d      	movs	r2, #109	; 0x6d
 8005cf0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8005cf2:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	2000005c 	.word	0x2000005c

08005d04 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d2c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <USBD_AUDIO_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e025      	b.n	8005d84 <USBD_AUDIO_EP0_RxReady+0x66>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005d3e:	330a      	adds	r3, #10
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d11d      	bne.n	8005d82 <USBD_AUDIO_EP0_RxReady+0x64>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d116      	bne.n	8005d82 <USBD_AUDIO_EP0_RxReady+0x64>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005d62:	330b      	adds	r3, #11
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	4790      	blx	r2
      haudio->control.cmd = 0U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005d70:	330a      	adds	r3, #10
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8005d7c:	330b      	adds	r3, #11
 8005d7e:	2200      	movs	r2, #0
 8005d80:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dec:	b590      	push	{r4, r7, lr}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dfe:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <USBD_AUDIO_DataOut+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e070      	b.n	8005eec <USBD_AUDIO_DataOut+0x100>
  }

  if (epnum == AUDIO_OUT_EP)
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d16c      	bne.n	8005eea <USBD_AUDIO_DataOut+0xfe>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f002 f905 	bl	8008024 <USBD_LL_GetRxDataSize>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e24:	695c      	ldr	r4, [r3, #20]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	3304      	adds	r3, #4
 8005e38:	8979      	ldrh	r1, [r7, #10]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005e46:	3308      	adds	r3, #8
 8005e48:	881a      	ldrh	r2, [r3, #0]
 8005e4a:	897b      	ldrh	r3, [r7, #10]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005e56:	3308      	adds	r3, #8
 8005e58:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005e60:	3308      	adds	r3, #8
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 8005e68:	d11c      	bne.n	8005ea4 <USBD_AUDIO_DataOut+0xb8>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005e70:	3308      	adds	r3, #8
 8005e72:	2200      	movs	r2, #0
 8005e74:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d10f      	bne.n	8005ea4 <USBD_AUDIO_DataOut+0xb8>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	1d10      	adds	r0, r2, #4
 8005e90:	2201      	movs	r2, #1
 8005e92:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8005e96:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005eaa:	3305      	adds	r3, #5
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10d      	bne.n	8005ece <USBD_AUDIO_DataOut+0xe2>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005eb8:	3308      	adds	r3, #8
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8005ec0:	d105      	bne.n	8005ece <USBD_AUDIO_DataOut+0xe2>
      {
        haudio->rd_enable = 1U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005ec8:	3305      	adds	r3, #5
 8005eca:	2201      	movs	r2, #1
 8005ecc:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	2358      	movs	r3, #88	; 0x58
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f002 f865 	bl	8007fb4 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd90      	pop	{r4, r7, pc}

08005ef4 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f04:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d013      	beq.n	8005f34 <AUDIO_REQ_GetCurrent+0x40>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005f12:	330b      	adds	r3, #11
 8005f14:	2240      	movs	r2, #64	; 0x40
 8005f16:	2100      	movs	r1, #0
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f002 f927 	bl	800816c <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005f24:	330b      	adds	r3, #11
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	88d2      	ldrh	r2, [r2, #6]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 fa7b 	bl	8007428 <USBD_CtlSendData>
 8005f32:	e000      	b.n	8005f36 <AUDIO_REQ_GetCurrent+0x42>
    return;
 8005f34:	bf00      	nop
}
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f4c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d026      	beq.n	8005fa2 <AUDIO_REQ_SetCurrent+0x66>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	88db      	ldrh	r3, [r3, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d023      	beq.n	8005fa4 <AUDIO_REQ_SetCurrent+0x68>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005f62:	330b      	adds	r3, #11
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	88d2      	ldrh	r2, [r2, #6]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 fa88 	bl	8007480 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005f76:	330a      	adds	r3, #10
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	88db      	ldrh	r3, [r3, #6]
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8005f88:	330b      	adds	r3, #11
 8005f8a:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	889b      	ldrh	r3, [r3, #4]
 8005f90:	0a1b      	lsrs	r3, r3, #8
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	e000      	b.n	8005fa4 <AUDIO_REQ_SetCurrent+0x68>
    return;
 8005fa2:	bf00      	nop
  }
}
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	220a      	movs	r2, #10
 8005fb8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8005fba:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	200000cc 	.word	0x200000cc

08005fcc <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e004      	b.n	8005fea <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 8006004:	4a0c      	ldr	r2, [pc, #48]	; (8006038 <USBD_MIDI_Init+0x40>)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	2202      	movs	r2, #2
 800600e:	2181      	movs	r1, #129	; 0x81
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 fe55 	bl	8007cc0 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 8006016:	2340      	movs	r3, #64	; 0x40
 8006018:	2202      	movs	r2, #2
 800601a:	2101      	movs	r1, #1
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 fe4f 	bl	8007cc0 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8006022:	2340      	movs	r3, #64	; 0x40
 8006024:	4a05      	ldr	r2, [pc, #20]	; (800603c <USBD_MIDI_Init+0x44>)
 8006026:	2101      	movs	r1, #1
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 ffc3 	bl	8007fb4 <USBD_LL_PrepareReceive>
  return 0;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000210 	.word	0x20000210
 800603c:	20001e7c 	.word	0x20001e7c

08006040 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 800604c:	4b07      	ldr	r3, [pc, #28]	; (800606c <USBD_MIDI_DeInit+0x2c>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 8006052:	2181      	movs	r1, #129	; 0x81
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fe71 	bl	8007d3c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800605a:	2101      	movs	r1, #1
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 fe6d 	bl	8007d3c <USBD_LL_CloseEP>
  return 0;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20000210 	.word	0x20000210

08006070 <USBD_MIDI_DataIn>:

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 800607c:	4b06      	ldr	r3, [pc, #24]	; (8006098 <USBD_MIDI_DataIn+0x28>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d102      	bne.n	800608a <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <USBD_MIDI_DataIn+0x28>)
 8006086:	2200      	movs	r2, #0
 8006088:	701a      	strb	r2, [r3, #0]
  }
  return USBD_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20000220 	.word	0x20000220

0800609c <USBD_MIDI_DataOut>:

static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ae:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	4613      	mov	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	897a      	ldrh	r2, [r7, #10]
 80060d0:	4611      	mov	r1, r2
 80060d2:	4806      	ldr	r0, [pc, #24]	; (80060ec <USBD_MIDI_DataOut+0x50>)
 80060d4:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	4a04      	ldr	r2, [pc, #16]	; (80060ec <USBD_MIDI_DataOut+0x50>)
 80060da:	2101      	movs	r1, #1
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 ff69 	bl	8007fb4 <USBD_LL_PrepareReceive>
  return USBD_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20001e7c 	.word	0x20001e7c

080060f0 <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 80060f6:	4b30      	ldr	r3, [pc, #192]	; (80061b8 <USBD_MIDI_SendPacket+0xc8>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d059      	beq.n	80061b2 <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 80060fe:	4b2f      	ldr	r3, [pc, #188]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006106:	d102      	bne.n	800610e <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 8006108:	4b2c      	ldr	r3, [pc, #176]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 800610e:	4b2b      	ldr	r3, [pc, #172]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b2b      	ldr	r3, [pc, #172]	; (80061c0 <USBD_MIDI_SendPacket+0xd0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d103      	bne.n	8006122 <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 800611a:	4b27      	ldr	r3, [pc, #156]	; (80061b8 <USBD_MIDI_SendPacket+0xc8>)
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
      return;
 8006120:	e047      	b.n	80061b2 <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 8006122:	4b26      	ldr	r3, [pc, #152]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b26      	ldr	r3, [pc, #152]	; (80061c0 <USBD_MIDI_SendPacket+0xd0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d906      	bls.n	800613c <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800612e:	4b23      	ldr	r3, [pc, #140]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006136:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <USBD_MIDI_SendPacket+0xd4>)
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e006      	b.n	800614a <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800613c:	4b20      	ldr	r3, [pc, #128]	; (80061c0 <USBD_MIDI_SendPacket+0xd0>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4b1e      	ldr	r3, [pc, #120]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	4a1f      	ldr	r2, [pc, #124]	; (80061c4 <USBD_MIDI_SendPacket+0xd4>)
 8006148:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 800614a:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <USBD_MIDI_SendPacket+0xd4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d90f      	bls.n	8006172 <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 8006152:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 8006158:	2340      	movs	r3, #64	; 0x40
 800615a:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 800615c:	4b17      	ldr	r3, [pc, #92]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3340      	adds	r3, #64	; 0x40
 8006162:	4a16      	ldr	r2, [pc, #88]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 8006164:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 8006166:	4b17      	ldr	r3, [pc, #92]	; (80061c4 <USBD_MIDI_SendPacket+0xd4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3b40      	subs	r3, #64	; 0x40
 800616c:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <USBD_MIDI_SendPacket+0xd4>)
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e00f      	b.n	8006192 <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 8006178:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <USBD_MIDI_SendPacket+0xd4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <USBD_MIDI_SendPacket+0xd4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4413      	add	r3, r2
 8006188:	4a0c      	ldr	r2, [pc, #48]	; (80061bc <USBD_MIDI_SendPacket+0xcc>)
 800618a:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <USBD_MIDI_SendPacket+0xd4>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 8006192:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <USBD_MIDI_SendPacket+0xc8>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 8006198:	bf00      	nop
 800619a:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <USBD_MIDI_SendPacket+0xd8>)
 800619c:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 800619e:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 80061a0:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <USBD_MIDI_SendPacket+0xdc>)
 80061a2:	441a      	add	r2, r3
 80061a4:	88bb      	ldrh	r3, [r7, #4]
 80061a6:	2181      	movs	r1, #129	; 0x81
 80061a8:	f001 fecc 	bl	8007f44 <USBD_LL_Transmit>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f3      	bne.n	800619a <USBD_MIDI_SendPacket+0xaa>
  }
}
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20000220 	.word	0x20000220
 80061bc:	20000218 	.word	0x20000218
 80061c0:	20000214 	.word	0x20000214
 80061c4:	2000021c 	.word	0x2000021c
 80061c8:	20000210 	.word	0x20000210
 80061cc:	20001ebc 	.word	0x20001ebc

080061d0 <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2265      	movs	r2, #101	; 0x65
 80061dc:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 80061de:	4b03      	ldr	r3, [pc, #12]	; (80061ec <USBD_MIDI_GetCfgDesc+0x1c>)
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20000110 	.word	0x20000110

080061f0 <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 80061fa:	2303      	movs	r3, #3
 80061fc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL){
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	4613      	mov	r3, r2
 800622a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006232:	2303      	movs	r3, #3
 8006234:	e01f      	b.n	8006276 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	79fa      	ldrb	r2, [r7, #7]
 8006268:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f001 fcaa 	bl	8007bc4 <USBD_LL_Init>
 8006270:	4603      	mov	r3, r0
 8006272:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006292:	2303      	movs	r3, #3
 8006294:	e016      	b.n	80062c4 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	f107 020e 	add.w	r2, r7, #14
 80062b6:	4610      	mov	r0, r2
 80062b8:	4798      	blx	r3
 80062ba:	4602      	mov	r2, r0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 fcc1 	bl	8007c5c <USBD_LL_Start>
 80062da:	4603      	mov	r3, r0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	460b      	mov	r3, r1
 8006304:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006306:	2303      	movs	r3, #3
 8006308:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	78fa      	ldrb	r2, [r7, #3]
 800631e:	4611      	mov	r1, r2
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	78fa      	ldrb	r2, [r7, #3]
 8006352:	4611      	mov	r1, r2
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
  }

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f000 ffac 	bl	80072d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2b01      	cmp	r3, #1
 800639c:	d00e      	beq.n	80063bc <USBD_LL_SetupStage+0x5a>
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d302      	bcc.n	80063a8 <USBD_LL_SetupStage+0x46>
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d014      	beq.n	80063d0 <USBD_LL_SetupStage+0x6e>
 80063a6:	e01d      	b.n	80063e4 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fa61 	bl	8006878 <USBD_StdDevReq>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]
      break;
 80063ba:	e020      	b.n	80063fe <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fac5 	bl	8006954 <USBD_StdItfReq>
 80063ca:	4603      	mov	r3, r0
 80063cc:	73fb      	strb	r3, [r7, #15]
      break;
 80063ce:	e016      	b.n	80063fe <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fb02 	bl	80069e2 <USBD_StdEPReq>
 80063de:	4603      	mov	r3, r0
 80063e0:	73fb      	strb	r3, [r7, #15]
      break;
 80063e2:	e00c      	b.n	80063fe <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 fcd8 	bl	8007da8 <USBD_LL_StallEP>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	bf00      	nop
  }

  return ret;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	460b      	mov	r3, r1
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006416:	7afb      	ldrb	r3, [r7, #11]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d138      	bne.n	800648e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006422:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800642a:	2b03      	cmp	r3, #3
 800642c:	d14a      	bne.n	80064c4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	429a      	cmp	r2, r3
 8006438:	d913      	bls.n	8006462 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	1ad2      	subs	r2, r2, r3
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4293      	cmp	r3, r2
 8006452:	bf28      	it	cs
 8006454:	4613      	movcs	r3, r2
 8006456:	461a      	mov	r2, r3
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f001 f82d 	bl	80074ba <USBD_CtlContinueRx>
 8006460:	e030      	b.n	80064c4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b03      	cmp	r3, #3
 800646c:	d10b      	bne.n	8006486 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f001 f828 	bl	80074dc <USBD_CtlSendStatus>
 800648c:	e01a      	b.n	80064c4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b03      	cmp	r3, #3
 8006498:	d114      	bne.n	80064c4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00e      	beq.n	80064c4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	7afa      	ldrb	r2, [r7, #11]
 80064b0:	4611      	mov	r1, r2
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	4798      	blx	r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	e000      	b.n	80064c6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b086      	sub	sp, #24
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	460b      	mov	r3, r1
 80064d8:	607a      	str	r2, [r7, #4]
 80064da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064dc:	7afb      	ldrb	r3, [r7, #11]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d16b      	bne.n	80065ba <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3314      	adds	r3, #20
 80064e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d156      	bne.n	80065a0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d914      	bls.n	8006528 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	1ad2      	subs	r2, r2, r3
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	461a      	mov	r2, r3
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 ffa2 	bl	800745e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800651a:	2300      	movs	r3, #0
 800651c:	2200      	movs	r2, #0
 800651e:	2100      	movs	r1, #0
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f001 fd47 	bl	8007fb4 <USBD_LL_PrepareReceive>
 8006526:	e03b      	b.n	80065a0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	429a      	cmp	r2, r3
 8006532:	d11c      	bne.n	800656e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800653c:	429a      	cmp	r2, r3
 800653e:	d316      	bcc.n	800656e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800654a:	429a      	cmp	r2, r3
 800654c:	d20f      	bcs.n	800656e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800654e:	2200      	movs	r2, #0
 8006550:	2100      	movs	r1, #0
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 ff83 	bl	800745e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006560:	2300      	movs	r3, #0
 8006562:	2200      	movs	r2, #0
 8006564:	2100      	movs	r1, #0
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f001 fd24 	bl	8007fb4 <USBD_LL_PrepareReceive>
 800656c:	e018      	b.n	80065a0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d10b      	bne.n	8006592 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006592:	2180      	movs	r1, #128	; 0x80
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f001 fc07 	bl	8007da8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 ffb1 	bl	8007502 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d122      	bne.n	80065f0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff fe9a 	bl	80062e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065b8:	e01a      	b.n	80065f0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d114      	bne.n	80065f0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	7afa      	ldrb	r2, [r7, #11]
 80065dc:	4611      	mov	r1, r2
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	4798      	blx	r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80065ec:	7dfb      	ldrb	r3, [r7, #23]
 80065ee:	e000      	b.n	80065f2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800662a:	2303      	movs	r3, #3
 800662c:	e02f      	b.n	800668e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00f      	beq.n	8006658 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6852      	ldr	r2, [r2, #4]
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	4611      	mov	r1, r2
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006658:	2340      	movs	r3, #64	; 0x40
 800665a:	2200      	movs	r2, #0
 800665c:	2100      	movs	r1, #0
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fb2e 	bl	8007cc0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2240      	movs	r2, #64	; 0x40
 8006670:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006674:	2340      	movs	r3, #64	; 0x40
 8006676:	2200      	movs	r2, #0
 8006678:	2180      	movs	r1, #128	; 0x80
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 fb20 	bl	8007cc0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2240      	movs	r2, #64	; 0x40
 800668a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2204      	movs	r2, #4
 80066d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d106      	bne.n	8006704 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006724:	2303      	movs	r3, #3
 8006726:	e012      	b.n	800674e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b03      	cmp	r3, #3
 8006732:	d10b      	bne.n	800674c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800676c:	2303      	movs	r3, #3
 800676e:	e014      	b.n	800679a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b03      	cmp	r3, #3
 800677a:	d10d      	bne.n	8006798 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	78fa      	ldrb	r2, [r7, #3]
 8006792:	4611      	mov	r1, r2
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e014      	b.n	80067e6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d10d      	bne.n	80067e4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d007      	beq.n	80067e4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	4611      	mov	r1, r2
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6852      	ldr	r2, [r2, #4]
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	4611      	mov	r1, r2
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3
  }

  return USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	3301      	adds	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800685a:	8a3b      	ldrh	r3, [r7, #16]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	b21a      	sxth	r2, r3
 8006860:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006864:	4313      	orrs	r3, r2
 8006866:	b21b      	sxth	r3, r3
 8006868:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800686a:	89fb      	ldrh	r3, [r7, #14]
}
 800686c:	4618      	mov	r0, r3
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800688e:	2b20      	cmp	r3, #32
 8006890:	d004      	beq.n	800689c <USBD_StdDevReq+0x24>
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d002      	beq.n	800689c <USBD_StdDevReq+0x24>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <USBD_StdDevReq+0x38>
 800689a:	e050      	b.n	800693e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	73fb      	strb	r3, [r7, #15]
      break;
 80068ae:	e04b      	b.n	8006948 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b09      	cmp	r3, #9
 80068b6:	d83c      	bhi.n	8006932 <USBD_StdDevReq+0xba>
 80068b8:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <USBD_StdDevReq+0x48>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	08006915 	.word	0x08006915
 80068c4:	08006929 	.word	0x08006929
 80068c8:	08006933 	.word	0x08006933
 80068cc:	0800691f 	.word	0x0800691f
 80068d0:	08006933 	.word	0x08006933
 80068d4:	080068f3 	.word	0x080068f3
 80068d8:	080068e9 	.word	0x080068e9
 80068dc:	08006933 	.word	0x08006933
 80068e0:	0800690b 	.word	0x0800690b
 80068e4:	080068fd 	.word	0x080068fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f9d4 	bl	8006c98 <USBD_GetDescriptor>
          break;
 80068f0:	e024      	b.n	800693c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fb63 	bl	8006fc0 <USBD_SetAddress>
          break;
 80068fa:	e01f      	b.n	800693c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fba2 	bl	8007048 <USBD_SetConfig>
 8006904:	4603      	mov	r3, r0
 8006906:	73fb      	strb	r3, [r7, #15]
          break;
 8006908:	e018      	b.n	800693c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fc41 	bl	8007194 <USBD_GetConfig>
          break;
 8006912:	e013      	b.n	800693c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fc71 	bl	80071fe <USBD_GetStatus>
          break;
 800691c:	e00e      	b.n	800693c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fca0 	bl	8007266 <USBD_SetFeature>
          break;
 8006926:	e009      	b.n	800693c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fcaf 	bl	800728e <USBD_ClrFeature>
          break;
 8006930:	e004      	b.n	800693c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fd06 	bl	8007346 <USBD_CtlError>
          break;
 800693a:	bf00      	nop
      }
      break;
 800693c:	e004      	b.n	8006948 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fd00 	bl	8007346 <USBD_CtlError>
      break;
 8006946:	bf00      	nop
  }

  return ret;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop

08006954 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800696a:	2b20      	cmp	r3, #32
 800696c:	d003      	beq.n	8006976 <USBD_StdItfReq+0x22>
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d001      	beq.n	8006976 <USBD_StdItfReq+0x22>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d12b      	bne.n	80069ce <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697c:	b2db      	uxtb	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	2b02      	cmp	r3, #2
 8006982:	d81d      	bhi.n	80069c0 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	889b      	ldrh	r3, [r3, #4]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b01      	cmp	r3, #1
 800698c:	d813      	bhi.n	80069b6 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	88db      	ldrh	r3, [r3, #6]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d110      	bne.n	80069ca <USBD_StdItfReq+0x76>
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10d      	bne.n	80069ca <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fd94 	bl	80074dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069b4:	e009      	b.n	80069ca <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fcc4 	bl	8007346 <USBD_CtlError>
          break;
 80069be:	e004      	b.n	80069ca <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fcbf 	bl	8007346 <USBD_CtlError>
          break;
 80069c8:	e000      	b.n	80069cc <USBD_StdItfReq+0x78>
          break;
 80069ca:	bf00      	nop
      }
      break;
 80069cc:	e004      	b.n	80069d8 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fcb8 	bl	8007346 <USBD_CtlError>
      break;
 80069d6:	bf00      	nop
  }

  return ret;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	889b      	ldrh	r3, [r3, #4]
 80069f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d004      	beq.n	8006a0c <USBD_StdEPReq+0x2a>
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	d002      	beq.n	8006a0c <USBD_StdEPReq+0x2a>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <USBD_StdEPReq+0x3e>
 8006a0a:	e13a      	b.n	8006c82 <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1e:	e135      	b.n	8006c8c <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d03f      	beq.n	8006aa8 <USBD_StdEPReq+0xc6>
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d002      	beq.n	8006a32 <USBD_StdEPReq+0x50>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d07b      	beq.n	8006b28 <USBD_StdEPReq+0x146>
 8006a30:	e121      	b.n	8006c76 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d002      	beq.n	8006a44 <USBD_StdEPReq+0x62>
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d015      	beq.n	8006a6e <USBD_StdEPReq+0x8c>
 8006a42:	e02b      	b.n	8006a9c <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <USBD_StdEPReq+0x82>
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b80      	cmp	r3, #128	; 0x80
 8006a4e:	d009      	beq.n	8006a64 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f9a7 	bl	8007da8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f9a3 	bl	8007da8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a62:	e020      	b.n	8006aa6 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fc6d 	bl	8007346 <USBD_CtlError>
              break;
 8006a6c:	e01b      	b.n	8006aa6 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	885b      	ldrh	r3, [r3, #2]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10e      	bne.n	8006a94 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <USBD_StdEPReq+0xb2>
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	2b80      	cmp	r3, #128	; 0x80
 8006a80:	d008      	beq.n	8006a94 <USBD_StdEPReq+0xb2>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	88db      	ldrh	r3, [r3, #6]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 f98a 	bl	8007da8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fd21 	bl	80074dc <USBD_CtlSendStatus>

              break;
 8006a9a:	e004      	b.n	8006aa6 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fc51 	bl	8007346 <USBD_CtlError>
              break;
 8006aa4:	bf00      	nop
          }
          break;
 8006aa6:	e0eb      	b.n	8006c80 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d002      	beq.n	8006aba <USBD_StdEPReq+0xd8>
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d015      	beq.n	8006ae4 <USBD_StdEPReq+0x102>
 8006ab8:	e02f      	b.n	8006b1a <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00c      	beq.n	8006ada <USBD_StdEPReq+0xf8>
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	2b80      	cmp	r3, #128	; 0x80
 8006ac4:	d009      	beq.n	8006ada <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f96c 	bl	8007da8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ad0:	2180      	movs	r1, #128	; 0x80
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 f968 	bl	8007da8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ad8:	e025      	b.n	8006b26 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fc32 	bl	8007346 <USBD_CtlError>
              break;
 8006ae2:	e020      	b.n	8006b26 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	885b      	ldrh	r3, [r3, #2]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d11b      	bne.n	8006b24 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 f98a 	bl	8007e14 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fceb 	bl	80074dc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006b18:	e004      	b.n	8006b24 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fc12 	bl	8007346 <USBD_CtlError>
              break;
 8006b22:	e000      	b.n	8006b26 <USBD_StdEPReq+0x144>
              break;
 8006b24:	bf00      	nop
          }
          break;
 8006b26:	e0ab      	b.n	8006c80 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d002      	beq.n	8006b3a <USBD_StdEPReq+0x158>
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d032      	beq.n	8006b9e <USBD_StdEPReq+0x1bc>
 8006b38:	e097      	b.n	8006c6a <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <USBD_StdEPReq+0x16e>
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d004      	beq.n	8006b50 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fbfc 	bl	8007346 <USBD_CtlError>
                break;
 8006b4e:	e091      	b.n	8006c74 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	da0b      	bge.n	8006b70 <USBD_StdEPReq+0x18e>
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	3310      	adds	r3, #16
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	e00b      	b.n	8006b88 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4413      	add	r3, r2
 8006b86:	3304      	adds	r3, #4
 8006b88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2202      	movs	r2, #2
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fc46 	bl	8007428 <USBD_CtlSendData>
              break;
 8006b9c:	e06a      	b.n	8006c74 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da11      	bge.n	8006bca <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	f003 020f 	and.w	r2, r3, #15
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3324      	adds	r3, #36	; 0x24
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d117      	bne.n	8006bf0 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fbbf 	bl	8007346 <USBD_CtlError>
                  break;
 8006bc8:	e054      	b.n	8006c74 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	f003 020f 	and.w	r2, r3, #15
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fbac 	bl	8007346 <USBD_CtlError>
                  break;
 8006bee:	e041      	b.n	8006c74 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	da0b      	bge.n	8006c10 <USBD_StdEPReq+0x22e>
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	3310      	adds	r3, #16
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	e00b      	b.n	8006c28 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	4413      	add	r3, r2
 8006c26:	3304      	adds	r3, #4
 8006c28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <USBD_StdEPReq+0x254>
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	2b80      	cmp	r3, #128	; 0x80
 8006c34:	d103      	bne.n	8006c3e <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	e00e      	b.n	8006c5c <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 f91c 	bl	8007e80 <USBD_LL_IsStallEP>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2201      	movs	r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e002      	b.n	8006c5c <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fbe0 	bl	8007428 <USBD_CtlSendData>
              break;
 8006c68:	e004      	b.n	8006c74 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fb6a 	bl	8007346 <USBD_CtlError>
              break;
 8006c72:	bf00      	nop
          }
          break;
 8006c74:	e004      	b.n	8006c80 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fb64 	bl	8007346 <USBD_CtlError>
          break;
 8006c7e:	bf00      	nop
      }
      break;
 8006c80:	e004      	b.n	8006c8c <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fb5e 	bl	8007346 <USBD_CtlError>
      break;
 8006c8a:	bf00      	nop
  }

  return ret;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	2b0e      	cmp	r3, #14
 8006cba:	f200 8152 	bhi.w	8006f62 <USBD_GetDescriptor+0x2ca>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <USBD_GetDescriptor+0x2c>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006d35 	.word	0x08006d35
 8006cc8:	08006d4d 	.word	0x08006d4d
 8006ccc:	08006d8d 	.word	0x08006d8d
 8006cd0:	08006f63 	.word	0x08006f63
 8006cd4:	08006f63 	.word	0x08006f63
 8006cd8:	08006f03 	.word	0x08006f03
 8006cdc:	08006f2f 	.word	0x08006f2f
 8006ce0:	08006f63 	.word	0x08006f63
 8006ce4:	08006f63 	.word	0x08006f63
 8006ce8:	08006f63 	.word	0x08006f63
 8006cec:	08006f63 	.word	0x08006f63
 8006cf0:	08006f63 	.word	0x08006f63
 8006cf4:	08006f63 	.word	0x08006f63
 8006cf8:	08006f63 	.word	0x08006f63
 8006cfc:	08006d01 	.word	0x08006d01
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	7c12      	ldrb	r2, [r2, #16]
 8006d18:	f107 0108 	add.w	r1, r7, #8
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
 8006d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d22:	e126      	b.n	8006f72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fb0d 	bl	8007346 <USBD_CtlError>
        err++;
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	72fb      	strb	r3, [r7, #11]
      break;
 8006d32:	e11e      	b.n	8006f72 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	7c12      	ldrb	r2, [r2, #16]
 8006d40:	f107 0108 	add.w	r1, r7, #8
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	60f8      	str	r0, [r7, #12]
      break;
 8006d4a:	e112      	b.n	8006f72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	7c1b      	ldrb	r3, [r3, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10d      	bne.n	8006d70 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5c:	f107 0208 	add.w	r2, r7, #8
 8006d60:	4610      	mov	r0, r2
 8006d62:	4798      	blx	r3
 8006d64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d6e:	e100      	b.n	8006f72 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	f107 0208 	add.w	r2, r7, #8
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3301      	adds	r3, #1
 8006d86:	2202      	movs	r2, #2
 8006d88:	701a      	strb	r2, [r3, #0]
      break;
 8006d8a:	e0f2      	b.n	8006f72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	885b      	ldrh	r3, [r3, #2]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	f200 80ac 	bhi.w	8006ef0 <USBD_GetDescriptor+0x258>
 8006d98:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <USBD_GetDescriptor+0x108>)
 8006d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9e:	bf00      	nop
 8006da0:	08006db9 	.word	0x08006db9
 8006da4:	08006ded 	.word	0x08006ded
 8006da8:	08006e21 	.word	0x08006e21
 8006dac:	08006e55 	.word	0x08006e55
 8006db0:	08006e89 	.word	0x08006e89
 8006db4:	08006ebd 	.word	0x08006ebd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	7c12      	ldrb	r2, [r2, #16]
 8006dd0:	f107 0108 	add.w	r1, r7, #8
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4798      	blx	r3
 8006dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dda:	e091      	b.n	8006f00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fab1 	bl	8007346 <USBD_CtlError>
            err++;
 8006de4:	7afb      	ldrb	r3, [r7, #11]
 8006de6:	3301      	adds	r3, #1
 8006de8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dea:	e089      	b.n	8006f00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00b      	beq.n	8006e10 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	7c12      	ldrb	r2, [r2, #16]
 8006e04:	f107 0108 	add.w	r1, r7, #8
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e0e:	e077      	b.n	8006f00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa97 	bl	8007346 <USBD_CtlError>
            err++;
 8006e18:	7afb      	ldrb	r3, [r7, #11]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e1e:	e06f      	b.n	8006f00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	7c12      	ldrb	r2, [r2, #16]
 8006e38:	f107 0108 	add.w	r1, r7, #8
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4798      	blx	r3
 8006e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e42:	e05d      	b.n	8006f00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa7d 	bl	8007346 <USBD_CtlError>
            err++;
 8006e4c:	7afb      	ldrb	r3, [r7, #11]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	72fb      	strb	r3, [r7, #11]
          break;
 8006e52:	e055      	b.n	8006f00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	7c12      	ldrb	r2, [r2, #16]
 8006e6c:	f107 0108 	add.w	r1, r7, #8
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
 8006e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e76:	e043      	b.n	8006f00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa63 	bl	8007346 <USBD_CtlError>
            err++;
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	3301      	adds	r3, #1
 8006e84:	72fb      	strb	r3, [r7, #11]
          break;
 8006e86:	e03b      	b.n	8006f00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7c12      	ldrb	r2, [r2, #16]
 8006ea0:	f107 0108 	add.w	r1, r7, #8
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eaa:	e029      	b.n	8006f00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fa49 	bl	8007346 <USBD_CtlError>
            err++;
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eba:	e021      	b.n	8006f00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7c12      	ldrb	r2, [r2, #16]
 8006ed4:	f107 0108 	add.w	r1, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ede:	e00f      	b.n	8006f00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa2f 	bl	8007346 <USBD_CtlError>
            err++;
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	3301      	adds	r3, #1
 8006eec:	72fb      	strb	r3, [r7, #11]
          break;
 8006eee:	e007      	b.n	8006f00 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa27 	bl	8007346 <USBD_CtlError>
          err++;
 8006ef8:	7afb      	ldrb	r3, [r7, #11]
 8006efa:	3301      	adds	r3, #1
 8006efc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006efe:	bf00      	nop
      }
      break;
 8006f00:	e037      	b.n	8006f72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7c1b      	ldrb	r3, [r3, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	f107 0208 	add.w	r2, r7, #8
 8006f16:	4610      	mov	r0, r2
 8006f18:	4798      	blx	r3
 8006f1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f1c:	e029      	b.n	8006f72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fa10 	bl	8007346 <USBD_CtlError>
        err++;
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f2c:	e021      	b.n	8006f72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7c1b      	ldrb	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10d      	bne.n	8006f52 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	f107 0208 	add.w	r2, r7, #8
 8006f42:	4610      	mov	r0, r2
 8006f44:	4798      	blx	r3
 8006f46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	2207      	movs	r2, #7
 8006f4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f50:	e00f      	b.n	8006f72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f9f6 	bl	8007346 <USBD_CtlError>
        err++;
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f60:	e007      	b.n	8006f72 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f9ee 	bl	8007346 <USBD_CtlError>
      err++;
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f70:	bf00      	nop
  }

  if (err != 0U)
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d11e      	bne.n	8006fb6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	88db      	ldrh	r3, [r3, #6]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d016      	beq.n	8006fae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006f80:	893b      	ldrh	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00e      	beq.n	8006fa4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	88da      	ldrh	r2, [r3, #6]
 8006f8a:	893b      	ldrh	r3, [r7, #8]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	bf28      	it	cs
 8006f90:	4613      	movcs	r3, r2
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f96:	893b      	ldrh	r3, [r7, #8]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68f9      	ldr	r1, [r7, #12]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa43 	bl	8007428 <USBD_CtlSendData>
 8006fa2:	e009      	b.n	8006fb8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f9cd 	bl	8007346 <USBD_CtlError>
 8006fac:	e004      	b.n	8006fb8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa94 	bl	80074dc <USBD_CtlSendStatus>
 8006fb4:	e000      	b.n	8006fb8 <USBD_GetDescriptor+0x320>
    return;
 8006fb6:	bf00      	nop
  }
}
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop

08006fc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	889b      	ldrh	r3, [r3, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d131      	bne.n	8007036 <USBD_SetAddress+0x76>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	88db      	ldrh	r3, [r3, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d12d      	bne.n	8007036 <USBD_SetAddress+0x76>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	885b      	ldrh	r3, [r3, #2]
 8006fde:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe0:	d829      	bhi.n	8007036 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	885b      	ldrh	r3, [r3, #2]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d104      	bne.n	8007004 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9a2 	bl	8007346 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007002:	e01c      	b.n	800703e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7bfa      	ldrb	r2, [r7, #15]
 8007008:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 ff61 	bl	8007ed8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa60 	bl	80074dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2202      	movs	r2, #2
 8007026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702a:	e008      	b.n	800703e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007034:	e003      	b.n	800703e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f984 	bl	8007346 <USBD_CtlError>
  }
}
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	b2da      	uxtb	r2, r3
 800705c:	4b4c      	ldr	r3, [pc, #304]	; (8007190 <USBD_SetConfig+0x148>)
 800705e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007060:	4b4b      	ldr	r3, [pc, #300]	; (8007190 <USBD_SetConfig+0x148>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d905      	bls.n	8007074 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f96b 	bl	8007346 <USBD_CtlError>
    return USBD_FAIL;
 8007070:	2303      	movs	r3, #3
 8007072:	e088      	b.n	8007186 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d002      	beq.n	8007086 <USBD_SetConfig+0x3e>
 8007080:	2b03      	cmp	r3, #3
 8007082:	d025      	beq.n	80070d0 <USBD_SetConfig+0x88>
 8007084:	e071      	b.n	800716a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007086:	4b42      	ldr	r3, [pc, #264]	; (8007190 <USBD_SetConfig+0x148>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01c      	beq.n	80070c8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800708e:	4b40      	ldr	r3, [pc, #256]	; (8007190 <USBD_SetConfig+0x148>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007098:	4b3d      	ldr	r3, [pc, #244]	; (8007190 <USBD_SetConfig+0x148>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff f92b 	bl	80062fa <USBD_SetClassConfig>
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f948 	bl	8007346 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070b6:	e065      	b.n	8007184 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fa0f 	bl	80074dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2203      	movs	r2, #3
 80070c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070c6:	e05d      	b.n	8007184 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fa07 	bl	80074dc <USBD_CtlSendStatus>
      break;
 80070ce:	e059      	b.n	8007184 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070d0:	4b2f      	ldr	r3, [pc, #188]	; (8007190 <USBD_SetConfig+0x148>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d112      	bne.n	80070fe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80070e0:	4b2b      	ldr	r3, [pc, #172]	; (8007190 <USBD_SetConfig+0x148>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070ea:	4b29      	ldr	r3, [pc, #164]	; (8007190 <USBD_SetConfig+0x148>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff f91e 	bl	8006332 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9f0 	bl	80074dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070fc:	e042      	b.n	8007184 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80070fe:	4b24      	ldr	r3, [pc, #144]	; (8007190 <USBD_SetConfig+0x148>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	429a      	cmp	r2, r3
 800710a:	d02a      	beq.n	8007162 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff f90c 	bl	8006332 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800711a:	4b1d      	ldr	r3, [pc, #116]	; (8007190 <USBD_SetConfig+0x148>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007124:	4b1a      	ldr	r3, [pc, #104]	; (8007190 <USBD_SetConfig+0x148>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff f8e5 	bl	80062fa <USBD_SetClassConfig>
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00f      	beq.n	800715a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f902 	bl	8007346 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff f8f1 	bl	8006332 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007158:	e014      	b.n	8007184 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f9be 	bl	80074dc <USBD_CtlSendStatus>
      break;
 8007160:	e010      	b.n	8007184 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f9ba 	bl	80074dc <USBD_CtlSendStatus>
      break;
 8007168:	e00c      	b.n	8007184 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f8ea 	bl	8007346 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <USBD_SetConfig+0x148>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff f8da 	bl	8006332 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800717e:	2303      	movs	r3, #3
 8007180:	73fb      	strb	r3, [r7, #15]
      break;
 8007182:	bf00      	nop
  }

  return ret;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000221 	.word	0x20000221

08007194 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	88db      	ldrh	r3, [r3, #6]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d004      	beq.n	80071b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f8cc 	bl	8007346 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071ae:	e022      	b.n	80071f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	db17      	blt.n	80071ec <USBD_GetConfig+0x58>
 80071bc:	2b02      	cmp	r3, #2
 80071be:	dd02      	ble.n	80071c6 <USBD_GetConfig+0x32>
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d00b      	beq.n	80071dc <USBD_GetConfig+0x48>
 80071c4:	e012      	b.n	80071ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3308      	adds	r3, #8
 80071d0:	2201      	movs	r2, #1
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f927 	bl	8007428 <USBD_CtlSendData>
        break;
 80071da:	e00c      	b.n	80071f6 <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3304      	adds	r3, #4
 80071e0:	2201      	movs	r2, #1
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f91f 	bl	8007428 <USBD_CtlSendData>
        break;
 80071ea:	e004      	b.n	80071f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f8a9 	bl	8007346 <USBD_CtlError>
        break;
 80071f4:	bf00      	nop
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720e:	b2db      	uxtb	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	2b02      	cmp	r3, #2
 8007214:	d81e      	bhi.n	8007254 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	88db      	ldrh	r3, [r3, #6]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d004      	beq.n	8007228 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f890 	bl	8007346 <USBD_CtlError>
        break;
 8007226:	e01a      	b.n	800725e <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f043 0202 	orr.w	r2, r3, #2
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	330c      	adds	r3, #12
 8007248:	2202      	movs	r2, #2
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f8eb 	bl	8007428 <USBD_CtlSendData>
      break;
 8007252:	e004      	b.n	800725e <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f875 	bl	8007346 <USBD_CtlError>
      break;
 800725c:	bf00      	nop
  }
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	885b      	ldrh	r3, [r3, #2]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d106      	bne.n	8007286 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f92b 	bl	80074dc <USBD_CtlSendStatus>
  }
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	3b01      	subs	r3, #1
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d80b      	bhi.n	80072be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	885b      	ldrh	r3, [r3, #2]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d10c      	bne.n	80072c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f910 	bl	80074dc <USBD_CtlSendStatus>
      }
      break;
 80072bc:	e004      	b.n	80072c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f840 	bl	8007346 <USBD_CtlError>
      break;
 80072c6:	e000      	b.n	80072ca <USBD_ClrFeature+0x3c>
      break;
 80072c8:	bf00      	nop
  }
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3301      	adds	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	781a      	ldrb	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff fa9d 	bl	800683c <SWAPBYTE>
 8007302:	4603      	mov	r3, r0
 8007304:	461a      	mov	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3301      	adds	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7ff fa90 	bl	800683c <SWAPBYTE>
 800731c:	4603      	mov	r3, r0
 800731e:	461a      	mov	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3301      	adds	r3, #1
 800732e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff fa83 	bl	800683c <SWAPBYTE>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	80da      	strh	r2, [r3, #6]
}
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007350:	2180      	movs	r1, #128	; 0x80
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fd28 	bl	8007da8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007358:	2100      	movs	r1, #0
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fd24 	bl	8007da8 <USBD_LL_StallEP>
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d036      	beq.n	80073ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007382:	6938      	ldr	r0, [r7, #16]
 8007384:	f000 f836 	bl	80073f4 <USBD_GetLen>
 8007388:	4603      	mov	r3, r0
 800738a:	3301      	adds	r3, #1
 800738c:	b29b      	uxth	r3, r3
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	4413      	add	r3, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	3301      	adds	r3, #1
 80073a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	4413      	add	r3, r2
 80073ae:	2203      	movs	r2, #3
 80073b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	3301      	adds	r3, #1
 80073b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073b8:	e013      	b.n	80073e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	4413      	add	r3, r2
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	7812      	ldrb	r2, [r2, #0]
 80073c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	3301      	adds	r3, #1
 80073ca:	613b      	str	r3, [r7, #16]
    idx++;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	3301      	adds	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	4413      	add	r3, r2
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
    idx++;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	3301      	adds	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e7      	bne.n	80073ba <USBD_GetString+0x52>
 80073ea:	e000      	b.n	80073ee <USBD_GetString+0x86>
    return;
 80073ec:	bf00      	nop
  }
}
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007404:	e005      	b.n	8007412 <USBD_GetLen+0x1e>
  {
    len++;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	3301      	adds	r3, #1
 800740a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	3301      	adds	r3, #1
 8007410:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f5      	bne.n	8007406 <USBD_GetLen+0x12>
  }

  return len;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2202      	movs	r2, #2
 8007438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	2100      	movs	r1, #0
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fd78 	bl	8007f44 <USBD_LL_Transmit>

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	2100      	movs	r1, #0
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fd67 	bl	8007f44 <USBD_LL_Transmit>

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2203      	movs	r2, #3
 8007490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	2100      	movs	r1, #0
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 fd82 	bl	8007fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	2100      	movs	r1, #0
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 fd71 	bl	8007fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2204      	movs	r2, #4
 80074e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074ec:	2300      	movs	r3, #0
 80074ee:	2200      	movs	r2, #0
 80074f0:	2100      	movs	r1, #0
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fd26 	bl	8007f44 <USBD_LL_Transmit>

  return USBD_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2205      	movs	r2, #5
 800750e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007512:	2300      	movs	r3, #0
 8007514:	2200      	movs	r2, #0
 8007516:	2100      	movs	r1, #0
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fd4b 	bl	8007fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800752c:	2200      	movs	r2, #0
 800752e:	4918      	ldr	r1, [pc, #96]	; (8007590 <MX_USB_DEVICE_Init+0x68>)
 8007530:	4818      	ldr	r0, [pc, #96]	; (8007594 <MX_USB_DEVICE_Init+0x6c>)
 8007532:	f7fe fe74 	bl	800621e <USBD_Init>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800753c:	f7f9 f8ca 	bl	80006d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8007540:	4915      	ldr	r1, [pc, #84]	; (8007598 <MX_USB_DEVICE_Init+0x70>)
 8007542:	4814      	ldr	r0, [pc, #80]	; (8007594 <MX_USB_DEVICE_Init+0x6c>)
 8007544:	f7fe fe9b 	bl	800627e <USBD_RegisterClass>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800754e:	f7f9 f8c1 	bl	80006d4 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8007552:	4912      	ldr	r1, [pc, #72]	; (800759c <MX_USB_DEVICE_Init+0x74>)
 8007554:	480f      	ldr	r0, [pc, #60]	; (8007594 <MX_USB_DEVICE_Init+0x6c>)
 8007556:	f7fe fd39 	bl	8005fcc <USBD_AUDIO_RegisterInterface>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007560:	f7f9 f8b8 	bl	80006d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007564:	480b      	ldr	r0, [pc, #44]	; (8007594 <MX_USB_DEVICE_Init+0x6c>)
 8007566:	f7fe feb1 	bl	80062cc <USBD_Start>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007570:	f7f9 f8b0 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  	  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8007574:	490a      	ldr	r1, [pc, #40]	; (80075a0 <MX_USB_DEVICE_Init+0x78>)
 8007576:	4807      	ldr	r0, [pc, #28]	; (8007594 <MX_USB_DEVICE_Init+0x6c>)
 8007578:	f7fe fe81 	bl	800627e <USBD_RegisterClass>
   	  USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800757c:	4909      	ldr	r1, [pc, #36]	; (80075a4 <MX_USB_DEVICE_Init+0x7c>)
 800757e:	4805      	ldr	r0, [pc, #20]	; (8007594 <MX_USB_DEVICE_Init+0x6c>)
 8007580:	f7fe fe36 	bl	80061f0 <USBD_MIDI_RegisterInterface>
   	  USBD_Start(&hUsbDeviceFS);
 8007584:	4803      	ldr	r0, [pc, #12]	; (8007594 <MX_USB_DEVICE_Init+0x6c>)
 8007586:	f7fe fea1 	bl	80062cc <USBD_Start>
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800758a:	bf00      	nop
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000194 	.word	0x20000194
 8007594:	20001fbc 	.word	0x20001fbc
 8007598:	20000024 	.word	0x20000024
 800759c:	20000178 	.word	0x20000178
 80075a0:	200000d8 	.word	0x200000d8
 80075a4:	20000014 	.word	0x20000014

080075a8 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 80075b4:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 80075ca:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d001      	beq.n	80075f0 <AUDIO_AudioCmd_FS+0x18>
 80075ec:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 80075ee:	e000      	b.n	80075f2 <AUDIO_AudioCmd_FS+0x1a>
    break;
 80075f0:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 80075f2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800760a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8007622:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800763e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007650:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007652:	4618      	mov	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	4603      	mov	r3, r0
 8007664:	6039      	str	r1, [r7, #0]
 8007666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2212      	movs	r2, #18
 800766c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800766e:	4b03      	ldr	r3, [pc, #12]	; (800767c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	200001b4 	.word	0x200001b4

08007680 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	6039      	str	r1, [r7, #0]
 800768a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2204      	movs	r2, #4
 8007690:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007692:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	200001d4 	.word	0x200001d4

080076a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	6039      	str	r1, [r7, #0]
 80076ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	4907      	ldr	r1, [pc, #28]	; (80076d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80076ba:	4808      	ldr	r0, [pc, #32]	; (80076dc <USBD_FS_ProductStrDescriptor+0x38>)
 80076bc:	f7ff fe54 	bl	8007368 <USBD_GetString>
 80076c0:	e004      	b.n	80076cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	4904      	ldr	r1, [pc, #16]	; (80076d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80076c6:	4805      	ldr	r0, [pc, #20]	; (80076dc <USBD_FS_ProductStrDescriptor+0x38>)
 80076c8:	f7ff fe4e 	bl	8007368 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076cc:	4b02      	ldr	r3, [pc, #8]	; (80076d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	2000228c 	.word	0x2000228c
 80076dc:	08008194 	.word	0x08008194

080076e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	4904      	ldr	r1, [pc, #16]	; (8007700 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076f0:	4804      	ldr	r0, [pc, #16]	; (8007704 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076f2:	f7ff fe39 	bl	8007368 <USBD_GetString>
  return USBD_StrDesc;
 80076f6:	4b02      	ldr	r3, [pc, #8]	; (8007700 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	2000228c 	.word	0x2000228c
 8007704:	080081a8 	.word	0x080081a8

08007708 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	221a      	movs	r2, #26
 8007718:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800771a:	f000 f855 	bl	80077c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800771e:	4b02      	ldr	r3, [pc, #8]	; (8007728 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	200001d8 	.word	0x200001d8

0800772c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	6039      	str	r1, [r7, #0]
 8007736:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	4907      	ldr	r1, [pc, #28]	; (8007760 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007742:	4808      	ldr	r0, [pc, #32]	; (8007764 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007744:	f7ff fe10 	bl	8007368 <USBD_GetString>
 8007748:	e004      	b.n	8007754 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4904      	ldr	r1, [pc, #16]	; (8007760 <USBD_FS_ConfigStrDescriptor+0x34>)
 800774e:	4805      	ldr	r0, [pc, #20]	; (8007764 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007750:	f7ff fe0a 	bl	8007368 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007754:	4b02      	ldr	r3, [pc, #8]	; (8007760 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	2000228c 	.word	0x2000228c
 8007764:	080081bc 	.word	0x080081bc

08007768 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d105      	bne.n	8007786 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4907      	ldr	r1, [pc, #28]	; (800779c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800777e:	4808      	ldr	r0, [pc, #32]	; (80077a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007780:	f7ff fdf2 	bl	8007368 <USBD_GetString>
 8007784:	e004      	b.n	8007790 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	4904      	ldr	r1, [pc, #16]	; (800779c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800778a:	4805      	ldr	r0, [pc, #20]	; (80077a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800778c:	f7ff fdec 	bl	8007368 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007790:	4b02      	ldr	r3, [pc, #8]	; (800779c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	2000228c 	.word	0x2000228c
 80077a0:	080081cc 	.word	0x080081cc

080077a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	6039      	str	r1, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	220c      	movs	r2, #12
 80077b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80077b6:	4b03      	ldr	r3, [pc, #12]	; (80077c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	200001c8 	.word	0x200001c8

080077c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077ce:	4b0f      	ldr	r3, [pc, #60]	; (800780c <Get_SerialNum+0x44>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077d4:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <Get_SerialNum+0x48>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077da:	4b0e      	ldr	r3, [pc, #56]	; (8007814 <Get_SerialNum+0x4c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4413      	add	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077ee:	2208      	movs	r2, #8
 80077f0:	4909      	ldr	r1, [pc, #36]	; (8007818 <Get_SerialNum+0x50>)
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 f814 	bl	8007820 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077f8:	2204      	movs	r2, #4
 80077fa:	4908      	ldr	r1, [pc, #32]	; (800781c <Get_SerialNum+0x54>)
 80077fc:	68b8      	ldr	r0, [r7, #8]
 80077fe:	f000 f80f 	bl	8007820 <IntToUnicode>
  }
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	1fff7590 	.word	0x1fff7590
 8007810:	1fff7594 	.word	0x1fff7594
 8007814:	1fff7598 	.word	0x1fff7598
 8007818:	200001da 	.word	0x200001da
 800781c:	200001ea 	.word	0x200001ea

08007820 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]
 8007836:	e027      	b.n	8007888 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	0f1b      	lsrs	r3, r3, #28
 800783c:	2b09      	cmp	r3, #9
 800783e:	d80b      	bhi.n	8007858 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	0f1b      	lsrs	r3, r3, #28
 8007844:	b2da      	uxtb	r2, r3
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	4619      	mov	r1, r3
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	440b      	add	r3, r1
 8007850:	3230      	adds	r2, #48	; 0x30
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e00a      	b.n	800786e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	0f1b      	lsrs	r3, r3, #28
 800785c:	b2da      	uxtb	r2, r3
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	4619      	mov	r1, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	440b      	add	r3, r1
 8007868:	3237      	adds	r2, #55	; 0x37
 800786a:	b2d2      	uxtb	r2, r2
 800786c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	3301      	adds	r3, #1
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	4413      	add	r3, r2
 800787e:	2200      	movs	r2, #0
 8007880:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	3301      	adds	r3, #1
 8007886:	75fb      	strb	r3, [r7, #23]
 8007888:	7dfa      	ldrb	r2, [r7, #23]
 800788a:	79fb      	ldrb	r3, [r7, #7]
 800788c:	429a      	cmp	r2, r3
 800788e:	d3d3      	bcc.n	8007838 <IntToUnicode+0x18>
  }
}
 8007890:	bf00      	nop
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b0ac      	sub	sp, #176	; 0xb0
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	605a      	str	r2, [r3, #4]
 80078ae:	609a      	str	r2, [r3, #8]
 80078b0:	60da      	str	r2, [r3, #12]
 80078b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80078b4:	f107 0314 	add.w	r3, r7, #20
 80078b8:	2288      	movs	r2, #136	; 0x88
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fc55 	bl	800816c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078ca:	d173      	bne.n	80079b4 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80078cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80078d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80078d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80078da:	2301      	movs	r3, #1
 80078dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80078de:	2301      	movs	r3, #1
 80078e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80078e2:	2318      	movs	r3, #24
 80078e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80078e6:	2307      	movs	r3, #7
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80078ea:	2302      	movs	r3, #2
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80078ee:	2302      	movs	r3, #2
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80078f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80078f6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80078f8:	f107 0314 	add.w	r3, r7, #20
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fb fc13 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8007908:	f7f8 fee4 	bl	80006d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800790c:	4b2b      	ldr	r3, [pc, #172]	; (80079bc <HAL_PCD_MspInit+0x120>)
 800790e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007910:	4a2a      	ldr	r2, [pc, #168]	; (80079bc <HAL_PCD_MspInit+0x120>)
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007918:	4b28      	ldr	r3, [pc, #160]	; (80079bc <HAL_PCD_MspInit+0x120>)
 800791a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007924:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800792c:	2302      	movs	r3, #2
 800792e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007932:	2300      	movs	r3, #0
 8007934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007938:	2303      	movs	r3, #3
 800793a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800793e:	230a      	movs	r3, #10
 8007940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007944:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007948:	4619      	mov	r1, r3
 800794a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800794e:	f7f9 f9eb 	bl	8000d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007952:	4b1a      	ldr	r3, [pc, #104]	; (80079bc <HAL_PCD_MspInit+0x120>)
 8007954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007956:	4a19      	ldr	r2, [pc, #100]	; (80079bc <HAL_PCD_MspInit+0x120>)
 8007958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800795c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800795e:	4b17      	ldr	r3, [pc, #92]	; (80079bc <HAL_PCD_MspInit+0x120>)
 8007960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800796a:	4b14      	ldr	r3, [pc, #80]	; (80079bc <HAL_PCD_MspInit+0x120>)
 800796c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d114      	bne.n	80079a0 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007976:	4b11      	ldr	r3, [pc, #68]	; (80079bc <HAL_PCD_MspInit+0x120>)
 8007978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797a:	4a10      	ldr	r2, [pc, #64]	; (80079bc <HAL_PCD_MspInit+0x120>)
 800797c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007980:	6593      	str	r3, [r2, #88]	; 0x58
 8007982:	4b0e      	ldr	r3, [pc, #56]	; (80079bc <HAL_PCD_MspInit+0x120>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800798a:	60bb      	str	r3, [r7, #8]
 800798c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800798e:	f7fa fdbf 	bl	8002510 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007992:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <HAL_PCD_MspInit+0x120>)
 8007994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007996:	4a09      	ldr	r2, [pc, #36]	; (80079bc <HAL_PCD_MspInit+0x120>)
 8007998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800799c:	6593      	str	r3, [r2, #88]	; 0x58
 800799e:	e001      	b.n	80079a4 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80079a0:	f7fa fdb6 	bl	8002510 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80079a4:	2200      	movs	r2, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	2043      	movs	r0, #67	; 0x43
 80079aa:	f7f9 f986 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079ae:	2043      	movs	r0, #67	; 0x43
 80079b0:	f7f9 f99f 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079b4:	bf00      	nop
 80079b6:	37b0      	adds	r7, #176	; 0xb0
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40021000 	.word	0x40021000

080079c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f7fe fcc3 	bl	8006362 <USBD_LL_SetupStage>
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f7fe fcfb 	bl	8006408 <USBD_LL_DataOutStage>
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	4613      	mov	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	334c      	adds	r3, #76	; 0x4c
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	4619      	mov	r1, r3
 8007a42:	f7fe fd44 	bl	80064ce <USBD_LL_DataInStage>
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fe58 	bl	8006712 <USBD_LL_SOF>
}
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d001      	beq.n	8007a82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a7e:	f7f8 fe29 	bl	80006d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a88:	7bfa      	ldrb	r2, [r7, #15]
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fe02 	bl	8006696 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe fdae 	bl	80065fa <USBD_LL_Reset>
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fdf1 	bl	80066b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007adc:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <HAL_PCD_SuspendCallback+0x48>)
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	4a03      	ldr	r2, [pc, #12]	; (8007af0 <HAL_PCD_SuspendCallback+0x48>)
 8007ae2:	f043 0306 	orr.w	r3, r3, #6
 8007ae6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b1c:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <HAL_PCD_ResumeCallback+0x4c>)
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	4a07      	ldr	r2, [pc, #28]	; (8007b40 <HAL_PCD_ResumeCallback+0x4c>)
 8007b22:	f023 0306 	bic.w	r3, r3, #6
 8007b26:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007b28:	f000 faf6 	bl	8008118 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fdd5 	bl	80066e2 <USBD_LL_Resume>
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	e000ed00 	.word	0xe000ed00

08007b44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fe fe21 	bl	80067a2 <USBD_LL_IsoOUTIncomplete>
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fde9 	bl	8006756 <USBD_LL_IsoINIncomplete>
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe fe27 	bl	80067ee <USBD_LL_DevConnected>
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe fe24 	bl	8006804 <USBD_LL_DevDisconnected>
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d13c      	bne.n	8007c4e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007bd4:	4a20      	ldr	r2, [pc, #128]	; (8007c58 <USBD_LL_Init+0x94>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <USBD_LL_Init+0x94>)
 8007be0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007be4:	4b1c      	ldr	r3, [pc, #112]	; (8007c58 <USBD_LL_Init+0x94>)
 8007be6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <USBD_LL_Init+0x94>)
 8007bee:	2206      	movs	r2, #6
 8007bf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bf2:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <USBD_LL_Init+0x94>)
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bf8:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <USBD_LL_Init+0x94>)
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bfe:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c04:	4b14      	ldr	r3, [pc, #80]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007c10:	4b11      	ldr	r3, [pc, #68]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c16:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c22:	480d      	ldr	r0, [pc, #52]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c24:	f7f9 fa40 	bl	80010a8 <HAL_PCD_Init>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c2e:	f7f8 fd51 	bl	80006d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c32:	2180      	movs	r1, #128	; 0x80
 8007c34:	4808      	ldr	r0, [pc, #32]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c36:	f7fa fbc2 	bl	80023be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c3a:	2240      	movs	r2, #64	; 0x40
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4806      	ldr	r0, [pc, #24]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c40:	f7fa fb76 	bl	8002330 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c44:	2280      	movs	r2, #128	; 0x80
 8007c46:	2101      	movs	r1, #1
 8007c48:	4803      	ldr	r0, [pc, #12]	; (8007c58 <USBD_LL_Init+0x94>)
 8007c4a:	f7fa fb71 	bl	8002330 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	2000248c 	.word	0x2000248c

08007c5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7f9 fb3c 	bl	80012f0 <HAL_PCD_Start>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d816      	bhi.n	8007cb0 <USBD_LL_Start+0x54>
 8007c82:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <USBD_LL_Start+0x2c>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007c99 	.word	0x08007c99
 8007c8c:	08007c9f 	.word	0x08007c9f
 8007c90:	08007ca5 	.word	0x08007ca5
 8007c94:	08007cab 	.word	0x08007cab
    case HAL_OK :
      usb_status = USBD_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c9c:	e00b      	b.n	8007cb6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca2:	e008      	b.n	8007cb6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca8:	e005      	b.n	8007cb6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007caa:	2303      	movs	r3, #3
 8007cac:	73fb      	strb	r3, [r7, #15]
    break;
 8007cae:	e002      	b.n	8007cb6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb4:	bf00      	nop
  }
  return usb_status;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	4608      	mov	r0, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	461a      	mov	r2, r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	70fb      	strb	r3, [r7, #3]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70bb      	strb	r3, [r7, #2]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ce8:	78bb      	ldrb	r3, [r7, #2]
 8007cea:	883a      	ldrh	r2, [r7, #0]
 8007cec:	78f9      	ldrb	r1, [r7, #3]
 8007cee:	f7f9 ffe6 	bl	8001cbe <HAL_PCD_EP_Open>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d817      	bhi.n	8007d2c <USBD_LL_OpenEP+0x6c>
 8007cfc:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <USBD_LL_OpenEP+0x44>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d15 	.word	0x08007d15
 8007d08:	08007d1b 	.word	0x08007d1b
 8007d0c:	08007d21 	.word	0x08007d21
 8007d10:	08007d27 	.word	0x08007d27
    case HAL_OK :
      usb_status = USBD_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
    break;
 8007d18:	e00b      	b.n	8007d32 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d1e:	e008      	b.n	8007d32 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d20:	2301      	movs	r3, #1
 8007d22:	73fb      	strb	r3, [r7, #15]
    break;
 8007d24:	e005      	b.n	8007d32 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d26:	2303      	movs	r3, #3
 8007d28:	73fb      	strb	r3, [r7, #15]
    break;
 8007d2a:	e002      	b.n	8007d32 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d30:	bf00      	nop
  }
  return usb_status;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d56:	78fa      	ldrb	r2, [r7, #3]
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fa f817 	bl	8001d8e <HAL_PCD_EP_Close>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d64:	7bbb      	ldrb	r3, [r7, #14]
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d816      	bhi.n	8007d98 <USBD_LL_CloseEP+0x5c>
 8007d6a:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <USBD_LL_CloseEP+0x34>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007d81 	.word	0x08007d81
 8007d74:	08007d87 	.word	0x08007d87
 8007d78:	08007d8d 	.word	0x08007d8d
 8007d7c:	08007d93 	.word	0x08007d93
    case HAL_OK :
      usb_status = USBD_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	73fb      	strb	r3, [r7, #15]
    break;
 8007d84:	e00b      	b.n	8007d9e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d86:	2303      	movs	r3, #3
 8007d88:	73fb      	strb	r3, [r7, #15]
    break;
 8007d8a:	e008      	b.n	8007d9e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d90:	e005      	b.n	8007d9e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d92:	2303      	movs	r3, #3
 8007d94:	73fb      	strb	r3, [r7, #15]
    break;
 8007d96:	e002      	b.n	8007d9e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d9c:	bf00      	nop
  }
  return usb_status;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fa f8be 	bl	8001f48 <HAL_PCD_EP_SetStall>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d816      	bhi.n	8007e04 <USBD_LL_StallEP+0x5c>
 8007dd6:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <USBD_LL_StallEP+0x34>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007ded 	.word	0x08007ded
 8007de0:	08007df3 	.word	0x08007df3
 8007de4:	08007df9 	.word	0x08007df9
 8007de8:	08007dff 	.word	0x08007dff
    case HAL_OK :
      usb_status = USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]
    break;
 8007df0:	e00b      	b.n	8007e0a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007df2:	2303      	movs	r3, #3
 8007df4:	73fb      	strb	r3, [r7, #15]
    break;
 8007df6:	e008      	b.n	8007e0a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007dfc:	e005      	b.n	8007e0a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	73fb      	strb	r3, [r7, #15]
    break;
 8007e02:	e002      	b.n	8007e0a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	73fb      	strb	r3, [r7, #15]
    break;
 8007e08:	bf00      	nop
  }
  return usb_status;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e2e:	78fa      	ldrb	r2, [r7, #3]
 8007e30:	4611      	mov	r1, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fa f8ea 	bl	800200c <HAL_PCD_EP_ClrStall>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d816      	bhi.n	8007e70 <USBD_LL_ClearStallEP+0x5c>
 8007e42:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <USBD_LL_ClearStallEP+0x34>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e59 	.word	0x08007e59
 8007e4c:	08007e5f 	.word	0x08007e5f
 8007e50:	08007e65 	.word	0x08007e65
 8007e54:	08007e6b 	.word	0x08007e6b
    case HAL_OK :
      usb_status = USBD_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e5c:	e00b      	b.n	8007e76 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	73fb      	strb	r3, [r7, #15]
    break;
 8007e62:	e008      	b.n	8007e76 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
    break;
 8007e68:	e005      	b.n	8007e76 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e6e:	e002      	b.n	8007e76 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007e70:	2303      	movs	r3, #3
 8007e72:	73fb      	strb	r3, [r7, #15]
    break;
 8007e74:	bf00      	nop
  }
  return usb_status;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	da0b      	bge.n	8007eb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	333e      	adds	r3, #62	; 0x3e
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	e00b      	b.n	8007ecc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007eca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ef2:	78fa      	ldrb	r2, [r7, #3]
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7f9 febc 	bl	8001c74 <HAL_PCD_SetAddress>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d816      	bhi.n	8007f34 <USBD_LL_SetUSBAddress+0x5c>
 8007f06:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <USBD_LL_SetUSBAddress+0x34>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	08007f23 	.word	0x08007f23
 8007f14:	08007f29 	.word	0x08007f29
 8007f18:	08007f2f 	.word	0x08007f2f
    case HAL_OK :
      usb_status = USBD_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f20:	e00b      	b.n	8007f3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f22:	2303      	movs	r3, #3
 8007f24:	73fb      	strb	r3, [r7, #15]
    break;
 8007f26:	e008      	b.n	8007f3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f2c:	e005      	b.n	8007f3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	73fb      	strb	r3, [r7, #15]
    break;
 8007f32:	e002      	b.n	8007f3a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007f34:	2303      	movs	r3, #3
 8007f36:	73fb      	strb	r3, [r7, #15]
    break;
 8007f38:	bf00      	nop
  }
  return usb_status;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	460b      	mov	r3, r1
 8007f52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f62:	7af9      	ldrb	r1, [r7, #11]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	f7f9 ffb1 	bl	8001ece <HAL_PCD_EP_Transmit>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007f70:	7dbb      	ldrb	r3, [r7, #22]
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d816      	bhi.n	8007fa4 <USBD_LL_Transmit+0x60>
 8007f76:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <USBD_LL_Transmit+0x38>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08007f8d 	.word	0x08007f8d
 8007f80:	08007f93 	.word	0x08007f93
 8007f84:	08007f99 	.word	0x08007f99
 8007f88:	08007f9f 	.word	0x08007f9f
    case HAL_OK :
      usb_status = USBD_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	75fb      	strb	r3, [r7, #23]
    break;
 8007f90:	e00b      	b.n	8007faa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f92:	2303      	movs	r3, #3
 8007f94:	75fb      	strb	r3, [r7, #23]
    break;
 8007f96:	e008      	b.n	8007faa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
    break;
 8007f9c:	e005      	b.n	8007faa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	75fb      	strb	r3, [r7, #23]
    break;
 8007fa2:	e002      	b.n	8007faa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	75fb      	strb	r3, [r7, #23]
    break;
 8007fa8:	bf00      	nop
  }
  return usb_status;
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fd2:	7af9      	ldrb	r1, [r7, #11]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	f7f9 ff23 	bl	8001e22 <HAL_PCD_EP_Receive>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007fe0:	7dbb      	ldrb	r3, [r7, #22]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d816      	bhi.n	8008014 <USBD_LL_PrepareReceive+0x60>
 8007fe6:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <USBD_LL_PrepareReceive+0x38>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	08008003 	.word	0x08008003
 8007ff4:	08008009 	.word	0x08008009
 8007ff8:	0800800f 	.word	0x0800800f
    case HAL_OK :
      usb_status = USBD_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	75fb      	strb	r3, [r7, #23]
    break;
 8008000:	e00b      	b.n	800801a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008002:	2303      	movs	r3, #3
 8008004:	75fb      	strb	r3, [r7, #23]
    break;
 8008006:	e008      	b.n	800801a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008008:	2301      	movs	r3, #1
 800800a:	75fb      	strb	r3, [r7, #23]
    break;
 800800c:	e005      	b.n	800801a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800800e:	2303      	movs	r3, #3
 8008010:	75fb      	strb	r3, [r7, #23]
    break;
 8008012:	e002      	b.n	800801a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	75fb      	strb	r3, [r7, #23]
    break;
 8008018:	bf00      	nop
  }
  return usb_status;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f7f9 ff2f 	bl	8001e9e <HAL_PCD_EP_GetRxCount>
 8008040:	4603      	mov	r3, r0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_PCDEx_LPM_Callback+0x18>
 800805e:	2b01      	cmp	r3, #1
 8008060:	d01f      	beq.n	80080a2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008062:	e03b      	b.n	80080dc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d007      	beq.n	800807c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800806c:	f000 f854 	bl	8008118 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008070:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	4a1b      	ldr	r2, [pc, #108]	; (80080e4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008076:	f023 0306 	bic.w	r3, r3, #6
 800807a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800808e:	f023 0301 	bic.w	r3, r3, #1
 8008092:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe fb21 	bl	80066e2 <USBD_LL_Resume>
    break;
 80080a0:	e01c      	b.n	80080dc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	6812      	ldr	r2, [r2, #0]
 80080b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080b4:	f043 0301 	orr.w	r3, r3, #1
 80080b8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fe faf8 	bl	80066b6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <HAL_PCDEx_LPM_Callback+0x98>)
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	4a04      	ldr	r2, [pc, #16]	; (80080e4 <HAL_PCDEx_LPM_Callback+0x98>)
 80080d4:	f043 0306 	orr.w	r3, r3, #6
 80080d8:	6113      	str	r3, [r2, #16]
    break;
 80080da:	bf00      	nop
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	e000ed00 	.word	0xe000ed00

080080e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	Number of sub-packets in the audio transfer buffer. You can modify this value but always make sure
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  /* USER CODE END 4 */
  return mem;
 80080f0:	4b03      	ldr	r3, [pc, #12]	; (8008100 <USBD_static_malloc+0x18>)
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20000224 	.word	0x20000224

08008104 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800811c:	f7f8 f9e2 	bl	80004e4 <SystemClock_Config>
}
 8008120:	bf00      	nop
 8008122:	bd80      	pop	{r7, pc}

08008124 <__libc_init_array>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	4e0d      	ldr	r6, [pc, #52]	; (800815c <__libc_init_array+0x38>)
 8008128:	4c0d      	ldr	r4, [pc, #52]	; (8008160 <__libc_init_array+0x3c>)
 800812a:	1ba4      	subs	r4, r4, r6
 800812c:	10a4      	asrs	r4, r4, #2
 800812e:	2500      	movs	r5, #0
 8008130:	42a5      	cmp	r5, r4
 8008132:	d109      	bne.n	8008148 <__libc_init_array+0x24>
 8008134:	4e0b      	ldr	r6, [pc, #44]	; (8008164 <__libc_init_array+0x40>)
 8008136:	4c0c      	ldr	r4, [pc, #48]	; (8008168 <__libc_init_array+0x44>)
 8008138:	f000 f820 	bl	800817c <_init>
 800813c:	1ba4      	subs	r4, r4, r6
 800813e:	10a4      	asrs	r4, r4, #2
 8008140:	2500      	movs	r5, #0
 8008142:	42a5      	cmp	r5, r4
 8008144:	d105      	bne.n	8008152 <__libc_init_array+0x2e>
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800814c:	4798      	blx	r3
 800814e:	3501      	adds	r5, #1
 8008150:	e7ee      	b.n	8008130 <__libc_init_array+0xc>
 8008152:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008156:	4798      	blx	r3
 8008158:	3501      	adds	r5, #1
 800815a:	e7f2      	b.n	8008142 <__libc_init_array+0x1e>
 800815c:	0800822c 	.word	0x0800822c
 8008160:	0800822c 	.word	0x0800822c
 8008164:	0800822c 	.word	0x0800822c
 8008168:	08008230 	.word	0x08008230

0800816c <memset>:
 800816c:	4402      	add	r2, r0
 800816e:	4603      	mov	r3, r0
 8008170:	4293      	cmp	r3, r2
 8008172:	d100      	bne.n	8008176 <memset+0xa>
 8008174:	4770      	bx	lr
 8008176:	f803 1b01 	strb.w	r1, [r3], #1
 800817a:	e7f9      	b.n	8008170 <memset+0x4>

0800817c <_init>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr

08008188 <_fini>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr
